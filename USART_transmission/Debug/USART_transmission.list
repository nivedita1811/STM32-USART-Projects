
USART_transmission.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080027bc  080027bc  000127bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027f4  080027f4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080027f4  080027f4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027f4  080027f4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027f4  080027f4  000127f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027f8  080027f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080027fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000001c  08002818  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002818  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f18  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e3  00000000  00000000  00028f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000698  00000000  00000000  0002a640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000610  00000000  00000000  0002acd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018acc  00000000  00000000  0002b2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ddd  00000000  00000000  00043db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f39a  00000000  00000000  0004cb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbf2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001628  00000000  00000000  000dbf7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080027a4 	.word	0x080027a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	080027a4 	.word	0x080027a4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_UART_TxCpltCallback>:
uint8_t test[] = "Hello World! \r\n";

/* Private user code ---------------------------------------------------------*/
/* UART Tx Transfer completed callback */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  /* Send the data again */
  HAL_UART_Transmit_IT(huart, test, strlen((char*)test));
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <HAL_UART_TxCpltCallback+0x28>)
 800023a:	0018      	movs	r0, r3
 800023c:	f7ff ff64 	bl	8000108 <strlen>
 8000240:	0003      	movs	r3, r0
 8000242:	b29a      	uxth	r2, r3
 8000244:	4904      	ldr	r1, [pc, #16]	; (8000258 <HAL_UART_TxCpltCallback+0x28>)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	0018      	movs	r0, r3
 800024a:	f001 fa67 	bl	800171c <HAL_UART_Transmit_IT>
}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	b002      	add	sp, #8
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	20000000 	.word	0x20000000

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000260:	f000 f9c0 	bl	80005e4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000264:	f000 f8a0 	bl	80003a8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000268:	f000 f842 	bl	80002f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800026c:	f000 f810 	bl	8000290 <MX_USART1_UART_Init>

  /* Start the transmission */
  HAL_UART_Transmit_IT(&huart1, test, strlen((char*)test));
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <main+0x2c>)
 8000272:	0018      	movs	r0, r3
 8000274:	f7ff ff48 	bl	8000108 <strlen>
 8000278:	0003      	movs	r3, r0
 800027a:	b29a      	uxth	r2, r3
 800027c:	4902      	ldr	r1, [pc, #8]	; (8000288 <main+0x2c>)
 800027e:	4b03      	ldr	r3, [pc, #12]	; (800028c <main+0x30>)
 8000280:	0018      	movs	r0, r3
 8000282:	f001 fa4b 	bl	800171c <HAL_UART_Transmit_IT>

  /* Infinite loop */
  while (1)
 8000286:	e7fe      	b.n	8000286 <main+0x2a>
 8000288:	20000000 	.word	0x20000000
 800028c:	20000038 	.word	0x20000038

08000290 <MX_USART1_UART_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8000294:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 8000296:	4a15      	ldr	r2, [pc, #84]	; (80002ec <MX_USART1_UART_Init+0x5c>)
 8000298:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800029a:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 800029c:	2296      	movs	r2, #150	; 0x96
 800029e:	0212      	lsls	r2, r2, #8
 80002a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ae:	4b0e      	ldr	r3, [pc, #56]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ba:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002c6:	4b08      	ldr	r3, [pc, #32]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <MX_USART1_UART_Init+0x58>)
 80002d4:	0018      	movs	r0, r3
 80002d6:	f001 f9cd 	bl	8001674 <HAL_UART_Init>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80002de:	f000 f85d 	bl	800039c <Error_Handler>
  }
}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000038 	.word	0x20000038
 80002ec:	40013800 	.word	0x40013800

080002f0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b089      	sub	sp, #36	; 0x24
 80002f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	240c      	movs	r4, #12
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	0018      	movs	r0, r3
 80002fc:	2314      	movs	r3, #20
 80002fe:	001a      	movs	r2, r3
 8000300:	2100      	movs	r1, #0
 8000302:	f002 fa47 	bl	8002794 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000306:	4b23      	ldr	r3, [pc, #140]	; (8000394 <MX_GPIO_Init+0xa4>)
 8000308:	695a      	ldr	r2, [r3, #20]
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <MX_GPIO_Init+0xa4>)
 800030c:	2180      	movs	r1, #128	; 0x80
 800030e:	03c9      	lsls	r1, r1, #15
 8000310:	430a      	orrs	r2, r1
 8000312:	615a      	str	r2, [r3, #20]
 8000314:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <MX_GPIO_Init+0xa4>)
 8000316:	695a      	ldr	r2, [r3, #20]
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	03db      	lsls	r3, r3, #15
 800031c:	4013      	ands	r3, r2
 800031e:	60bb      	str	r3, [r7, #8]
 8000320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000322:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <MX_GPIO_Init+0xa4>)
 8000324:	695a      	ldr	r2, [r3, #20]
 8000326:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_GPIO_Init+0xa4>)
 8000328:	2180      	movs	r1, #128	; 0x80
 800032a:	0309      	lsls	r1, r1, #12
 800032c:	430a      	orrs	r2, r1
 800032e:	615a      	str	r2, [r3, #20]
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_GPIO_Init+0xa4>)
 8000332:	695a      	ldr	r2, [r3, #20]
 8000334:	2380      	movs	r3, #128	; 0x80
 8000336:	031b      	lsls	r3, r3, #12
 8000338:	4013      	ands	r3, r2
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800033e:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_GPIO_Init+0xa4>)
 8000340:	695a      	ldr	r2, [r3, #20]
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <MX_GPIO_Init+0xa4>)
 8000344:	2180      	movs	r1, #128	; 0x80
 8000346:	0289      	lsls	r1, r1, #10
 8000348:	430a      	orrs	r2, r1
 800034a:	615a      	str	r2, [r3, #20]
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_GPIO_Init+0xa4>)
 800034e:	695a      	ldr	r2, [r3, #20]
 8000350:	2380      	movs	r3, #128	; 0x80
 8000352:	029b      	lsls	r3, r3, #10
 8000354:	4013      	ands	r3, r2
 8000356:	603b      	str	r3, [r7, #0]
 8000358:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_GPIO_Init+0xa8>)
 800035c:	2200      	movs	r2, #0
 800035e:	2180      	movs	r1, #128	; 0x80
 8000360:	0018      	movs	r0, r3
 8000362:	f000 fc77 	bl	8000c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000366:	0021      	movs	r1, r4
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2280      	movs	r2, #128	; 0x80
 800036c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036e:	187b      	adds	r3, r7, r1
 8000370:	2201      	movs	r2, #1
 8000372:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	187b      	adds	r3, r7, r1
 8000376:	2200      	movs	r2, #0
 8000378:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000380:	187b      	adds	r3, r7, r1
 8000382:	4a05      	ldr	r2, [pc, #20]	; (8000398 <MX_GPIO_Init+0xa8>)
 8000384:	0019      	movs	r1, r3
 8000386:	0010      	movs	r0, r2
 8000388:	f000 faec 	bl	8000964 <HAL_GPIO_Init>

}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b009      	add	sp, #36	; 0x24
 8000392:	bd90      	pop	{r4, r7, pc}
 8000394:	40021000 	.word	0x40021000
 8000398:	48000800 	.word	0x48000800

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
}
 80003a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <Error_Handler+0x8>
	...

080003a8 <SystemClock_Config>:
  }
  /* USER CODE END Error_Handler_Debug */
}

void SystemClock_Config(void)
{
 80003a8:	b590      	push	{r4, r7, lr}
 80003aa:	b093      	sub	sp, #76	; 0x4c
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	2414      	movs	r4, #20
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	0018      	movs	r0, r3
 80003b4:	2334      	movs	r3, #52	; 0x34
 80003b6:	001a      	movs	r2, r3
 80003b8:	2100      	movs	r1, #0
 80003ba:	f002 f9eb 	bl	8002794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	0018      	movs	r0, r3
 80003c2:	2310      	movs	r3, #16
 80003c4:	001a      	movs	r2, r3
 80003c6:	2100      	movs	r1, #0
 80003c8:	f002 f9e4 	bl	8002794 <memset>

  /**Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80003cc:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <SystemClock_Config+0x9c>)
 80003ce:	69da      	ldr	r2, [r3, #28]
 80003d0:	4b1c      	ldr	r3, [pc, #112]	; (8000444 <SystemClock_Config+0x9c>)
 80003d2:	2180      	movs	r1, #128	; 0x80
 80003d4:	0549      	lsls	r1, r1, #21
 80003d6:	430a      	orrs	r2, r1
 80003d8:	61da      	str	r2, [r3, #28]
 80003da:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <SystemClock_Config+0x9c>)
 80003dc:	69da      	ldr	r2, [r3, #28]
 80003de:	2380      	movs	r3, #128	; 0x80
 80003e0:	055b      	lsls	r3, r3, #21
 80003e2:	4013      	ands	r3, r2
 80003e4:	603b      	str	r3, [r7, #0]
 80003e6:	683b      	ldr	r3, [r7, #0]
  //__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /**Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e8:	0021      	movs	r1, r4
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2202      	movs	r2, #2
 80003ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	2201      	movs	r2, #1
 80003f4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2210      	movs	r2, #16
 80003fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000402:	187b      	adds	r3, r7, r1
 8000404:	0018      	movs	r0, r3
 8000406:	f000 fc43 	bl	8000c90 <HAL_RCC_OscConfig>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800040e:	f7ff ffc5 	bl	800039c <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2207      	movs	r2, #7
 8000416:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2200      	movs	r2, #0
 800041c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	2100      	movs	r1, #0
 800042e:	0018      	movs	r0, r3
 8000430:	f000 ffb4 	bl	800139c <HAL_RCC_ClockConfig>
 8000434:	1e03      	subs	r3, r0, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000438:	f7ff ffb0 	bl	800039c <Error_Handler>
  }
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b013      	add	sp, #76	; 0x4c
 8000442:	bd90      	pop	{r4, r7, pc}
 8000444:	40021000 	.word	0x40021000

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044e:	4b0f      	ldr	r3, [pc, #60]	; (800048c <HAL_MspInit+0x44>)
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <HAL_MspInit+0x44>)
 8000454:	2101      	movs	r1, #1
 8000456:	430a      	orrs	r2, r1
 8000458:	619a      	str	r2, [r3, #24]
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <HAL_MspInit+0x44>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	2201      	movs	r2, #1
 8000460:	4013      	ands	r3, r2
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <HAL_MspInit+0x44>)
 8000468:	69da      	ldr	r2, [r3, #28]
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <HAL_MspInit+0x44>)
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	0549      	lsls	r1, r1, #21
 8000470:	430a      	orrs	r2, r1
 8000472:	61da      	str	r2, [r3, #28]
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <HAL_MspInit+0x44>)
 8000476:	69da      	ldr	r2, [r3, #28]
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	055b      	lsls	r3, r3, #21
 800047c:	4013      	ands	r3, r2
 800047e:	603b      	str	r3, [r7, #0]
 8000480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	b002      	add	sp, #8
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	40021000 	.word	0x40021000

08000490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000490:	b590      	push	{r4, r7, lr}
 8000492:	b08b      	sub	sp, #44	; 0x2c
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000498:	2414      	movs	r4, #20
 800049a:	193b      	adds	r3, r7, r4
 800049c:	0018      	movs	r0, r3
 800049e:	2314      	movs	r3, #20
 80004a0:	001a      	movs	r2, r3
 80004a2:	2100      	movs	r1, #0
 80004a4:	f002 f976 	bl	8002794 <memset>
  if(huart->Instance==USART1)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a21      	ldr	r2, [pc, #132]	; (8000534 <HAL_UART_MspInit+0xa4>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d13b      	bne.n	800052a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004b2:	4b21      	ldr	r3, [pc, #132]	; (8000538 <HAL_UART_MspInit+0xa8>)
 80004b4:	699a      	ldr	r2, [r3, #24]
 80004b6:	4b20      	ldr	r3, [pc, #128]	; (8000538 <HAL_UART_MspInit+0xa8>)
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	01c9      	lsls	r1, r1, #7
 80004bc:	430a      	orrs	r2, r1
 80004be:	619a      	str	r2, [r3, #24]
 80004c0:	4b1d      	ldr	r3, [pc, #116]	; (8000538 <HAL_UART_MspInit+0xa8>)
 80004c2:	699a      	ldr	r2, [r3, #24]
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	01db      	lsls	r3, r3, #7
 80004c8:	4013      	ands	r3, r2
 80004ca:	613b      	str	r3, [r7, #16]
 80004cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ce:	4b1a      	ldr	r3, [pc, #104]	; (8000538 <HAL_UART_MspInit+0xa8>)
 80004d0:	695a      	ldr	r2, [r3, #20]
 80004d2:	4b19      	ldr	r3, [pc, #100]	; (8000538 <HAL_UART_MspInit+0xa8>)
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	0289      	lsls	r1, r1, #10
 80004d8:	430a      	orrs	r2, r1
 80004da:	615a      	str	r2, [r3, #20]
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <HAL_UART_MspInit+0xa8>)
 80004de:	695a      	ldr	r2, [r3, #20]
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	029b      	lsls	r3, r3, #10
 80004e4:	4013      	ands	r3, r2
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	22c0      	movs	r2, #192	; 0xc0
 80004ee:	00d2      	lsls	r2, r2, #3
 80004f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f2:	0021      	movs	r1, r4
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2202      	movs	r2, #2
 80004f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2203      	movs	r2, #3
 8000504:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2201      	movs	r2, #1
 800050a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	187a      	adds	r2, r7, r1
 800050e:	2390      	movs	r3, #144	; 0x90
 8000510:	05db      	lsls	r3, r3, #23
 8000512:	0011      	movs	r1, r2
 8000514:	0018      	movs	r0, r3
 8000516:	f000 fa25 	bl	8000964 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2100      	movs	r1, #0
 800051e:	201b      	movs	r0, #27
 8000520:	f000 f970 	bl	8000804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000524:	201b      	movs	r0, #27
 8000526:	f000 f982 	bl	800082e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b00b      	add	sp, #44	; 0x2c
 8000530:	bd90      	pop	{r4, r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	40013800 	.word	0x40013800
 8000538:	40021000 	.word	0x40021000

0800053c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <NMI_Handler+0x4>

08000542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <HardFault_Handler+0x4>

08000548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000560:	f000 f888 	bl	8000674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <USART1_IRQHandler+0x14>)
 8000572:	0018      	movs	r0, r3
 8000574:	f001 f942 	bl	80017fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	20000038 	.word	0x20000038

08000584 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000588:	46c0      	nop			; (mov r8, r8)
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000592:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000594:	f7ff fff6 	bl	8000584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000598:	480c      	ldr	r0, [pc, #48]	; (80005cc <LoopForever+0x6>)
  ldr r1, =_edata
 800059a:	490d      	ldr	r1, [pc, #52]	; (80005d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <LoopForever+0xe>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b0:	4c0a      	ldr	r4, [pc, #40]	; (80005dc <LoopForever+0x16>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005be:	f002 f8c5 	bl	800274c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c2:	f7ff fe4b 	bl	800025c <main>

080005c6 <LoopForever>:

LoopForever:
    b LoopForever
 80005c6:	e7fe      	b.n	80005c6 <LoopForever>
  ldr   r0, =_estack
 80005c8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80005d4:	080027fc 	.word	0x080027fc
  ldr r2, =_sbss
 80005d8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80005dc:	200000c4 	.word	0x200000c4

080005e0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC1_COMP_IRQHandler>
	...

080005e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e8:	4b07      	ldr	r3, [pc, #28]	; (8000608 <HAL_Init+0x24>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_Init+0x24>)
 80005ee:	2110      	movs	r1, #16
 80005f0:	430a      	orrs	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f000 f809 	bl	800060c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005fa:	f7ff ff25 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	40022000 	.word	0x40022000

0800060c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <HAL_InitTick+0x5c>)
 8000616:	681c      	ldr	r4, [r3, #0]
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <HAL_InitTick+0x60>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	0019      	movs	r1, r3
 800061e:	23fa      	movs	r3, #250	; 0xfa
 8000620:	0098      	lsls	r0, r3, #2
 8000622:	f7ff fd79 	bl	8000118 <__udivsi3>
 8000626:	0003      	movs	r3, r0
 8000628:	0019      	movs	r1, r3
 800062a:	0020      	movs	r0, r4
 800062c:	f7ff fd74 	bl	8000118 <__udivsi3>
 8000630:	0003      	movs	r3, r0
 8000632:	0018      	movs	r0, r3
 8000634:	f000 f90b 	bl	800084e <HAL_SYSTICK_Config>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800063c:	2301      	movs	r3, #1
 800063e:	e00f      	b.n	8000660 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b03      	cmp	r3, #3
 8000644:	d80b      	bhi.n	800065e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	2301      	movs	r3, #1
 800064a:	425b      	negs	r3, r3
 800064c:	2200      	movs	r2, #0
 800064e:	0018      	movs	r0, r3
 8000650:	f000 f8d8 	bl	8000804 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_InitTick+0x64>)
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800065a:	2300      	movs	r3, #0
 800065c:	e000      	b.n	8000660 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	b003      	add	sp, #12
 8000666:	bd90      	pop	{r4, r7, pc}
 8000668:	20000010 	.word	0x20000010
 800066c:	20000018 	.word	0x20000018
 8000670:	20000014 	.word	0x20000014

08000674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_IncTick+0x1c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	001a      	movs	r2, r3
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_IncTick+0x20>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	18d2      	adds	r2, r2, r3
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <HAL_IncTick+0x20>)
 8000686:	601a      	str	r2, [r3, #0]
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	20000018 	.word	0x20000018
 8000694:	200000c0 	.word	0x200000c0

08000698 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  return uwTick;
 800069c:	4b02      	ldr	r3, [pc, #8]	; (80006a8 <HAL_GetTick+0x10>)
 800069e:	681b      	ldr	r3, [r3, #0]
}
 80006a0:	0018      	movs	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	200000c0 	.word	0x200000c0

080006ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	0002      	movs	r2, r0
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006b8:	1dfb      	adds	r3, r7, #7
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b7f      	cmp	r3, #127	; 0x7f
 80006be:	d809      	bhi.n	80006d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	001a      	movs	r2, r3
 80006c6:	231f      	movs	r3, #31
 80006c8:	401a      	ands	r2, r3
 80006ca:	4b04      	ldr	r3, [pc, #16]	; (80006dc <__NVIC_EnableIRQ+0x30>)
 80006cc:	2101      	movs	r1, #1
 80006ce:	4091      	lsls	r1, r2
 80006d0:	000a      	movs	r2, r1
 80006d2:	601a      	str	r2, [r3, #0]
  }
}
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b002      	add	sp, #8
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	0002      	movs	r2, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b7f      	cmp	r3, #127	; 0x7f
 80006f4:	d828      	bhi.n	8000748 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f6:	4a2f      	ldr	r2, [pc, #188]	; (80007b4 <__NVIC_SetPriority+0xd4>)
 80006f8:	1dfb      	adds	r3, r7, #7
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	089b      	lsrs	r3, r3, #2
 8000700:	33c0      	adds	r3, #192	; 0xc0
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	589b      	ldr	r3, [r3, r2]
 8000706:	1dfa      	adds	r2, r7, #7
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	0011      	movs	r1, r2
 800070c:	2203      	movs	r2, #3
 800070e:	400a      	ands	r2, r1
 8000710:	00d2      	lsls	r2, r2, #3
 8000712:	21ff      	movs	r1, #255	; 0xff
 8000714:	4091      	lsls	r1, r2
 8000716:	000a      	movs	r2, r1
 8000718:	43d2      	mvns	r2, r2
 800071a:	401a      	ands	r2, r3
 800071c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	019b      	lsls	r3, r3, #6
 8000722:	22ff      	movs	r2, #255	; 0xff
 8000724:	401a      	ands	r2, r3
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	0018      	movs	r0, r3
 800072c:	2303      	movs	r3, #3
 800072e:	4003      	ands	r3, r0
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000734:	481f      	ldr	r0, [pc, #124]	; (80007b4 <__NVIC_SetPriority+0xd4>)
 8000736:	1dfb      	adds	r3, r7, #7
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b25b      	sxtb	r3, r3
 800073c:	089b      	lsrs	r3, r3, #2
 800073e:	430a      	orrs	r2, r1
 8000740:	33c0      	adds	r3, #192	; 0xc0
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000746:	e031      	b.n	80007ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <__NVIC_SetPriority+0xd8>)
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	0019      	movs	r1, r3
 8000750:	230f      	movs	r3, #15
 8000752:	400b      	ands	r3, r1
 8000754:	3b08      	subs	r3, #8
 8000756:	089b      	lsrs	r3, r3, #2
 8000758:	3306      	adds	r3, #6
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	18d3      	adds	r3, r2, r3
 800075e:	3304      	adds	r3, #4
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	1dfa      	adds	r2, r7, #7
 8000764:	7812      	ldrb	r2, [r2, #0]
 8000766:	0011      	movs	r1, r2
 8000768:	2203      	movs	r2, #3
 800076a:	400a      	ands	r2, r1
 800076c:	00d2      	lsls	r2, r2, #3
 800076e:	21ff      	movs	r1, #255	; 0xff
 8000770:	4091      	lsls	r1, r2
 8000772:	000a      	movs	r2, r1
 8000774:	43d2      	mvns	r2, r2
 8000776:	401a      	ands	r2, r3
 8000778:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	019b      	lsls	r3, r3, #6
 800077e:	22ff      	movs	r2, #255	; 0xff
 8000780:	401a      	ands	r2, r3
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	0018      	movs	r0, r3
 8000788:	2303      	movs	r3, #3
 800078a:	4003      	ands	r3, r0
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000790:	4809      	ldr	r0, [pc, #36]	; (80007b8 <__NVIC_SetPriority+0xd8>)
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	001c      	movs	r4, r3
 8000798:	230f      	movs	r3, #15
 800079a:	4023      	ands	r3, r4
 800079c:	3b08      	subs	r3, #8
 800079e:	089b      	lsrs	r3, r3, #2
 80007a0:	430a      	orrs	r2, r1
 80007a2:	3306      	adds	r3, #6
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	18c3      	adds	r3, r0, r3
 80007a8:	3304      	adds	r3, #4
 80007aa:	601a      	str	r2, [r3, #0]
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b003      	add	sp, #12
 80007b2:	bd90      	pop	{r4, r7, pc}
 80007b4:	e000e100 	.word	0xe000e100
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	1e5a      	subs	r2, r3, #1
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	045b      	lsls	r3, r3, #17
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d301      	bcc.n	80007d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d0:	2301      	movs	r3, #1
 80007d2:	e010      	b.n	80007f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <SysTick_Config+0x44>)
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	3a01      	subs	r2, #1
 80007da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007dc:	2301      	movs	r3, #1
 80007de:	425b      	negs	r3, r3
 80007e0:	2103      	movs	r1, #3
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff ff7c 	bl	80006e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <SysTick_Config+0x44>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ee:	4b04      	ldr	r3, [pc, #16]	; (8000800 <SysTick_Config+0x44>)
 80007f0:	2207      	movs	r2, #7
 80007f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	0018      	movs	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	e000e010 	.word	0xe000e010

08000804 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	210f      	movs	r1, #15
 8000810:	187b      	adds	r3, r7, r1
 8000812:	1c02      	adds	r2, r0, #0
 8000814:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000816:	68ba      	ldr	r2, [r7, #8]
 8000818:	187b      	adds	r3, r7, r1
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b25b      	sxtb	r3, r3
 800081e:	0011      	movs	r1, r2
 8000820:	0018      	movs	r0, r3
 8000822:	f7ff ff5d 	bl	80006e0 <__NVIC_SetPriority>
}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b004      	add	sp, #16
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	0002      	movs	r2, r0
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b25b      	sxtb	r3, r3
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff ff33 	bl	80006ac <__NVIC_EnableIRQ>
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	0018      	movs	r0, r3
 800085a:	f7ff ffaf 	bl	80007bc <SysTick_Config>
 800085e:	0003      	movs	r3, r0
}
 8000860:	0018      	movs	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	b002      	add	sp, #8
 8000866:	bd80      	pop	{r7, pc}

08000868 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2221      	movs	r2, #33	; 0x21
 8000874:	5c9b      	ldrb	r3, [r3, r2]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b02      	cmp	r3, #2
 800087a:	d008      	beq.n	800088e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2204      	movs	r2, #4
 8000880:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2220      	movs	r2, #32
 8000886:	2100      	movs	r1, #0
 8000888:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e020      	b.n	80008d0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	210e      	movs	r1, #14
 800089a:	438a      	bics	r2, r1
 800089c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2101      	movs	r1, #1
 80008aa:	438a      	bics	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008b6:	2101      	movs	r1, #1
 80008b8:	4091      	lsls	r1, r2
 80008ba:	000a      	movs	r2, r1
 80008bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2221      	movs	r2, #33	; 0x21
 80008c2:	2101      	movs	r1, #1
 80008c4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2220      	movs	r2, #32
 80008ca:	2100      	movs	r1, #0
 80008cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80008ce:	2300      	movs	r3, #0
}
 80008d0:	0018      	movs	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	b002      	add	sp, #8
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008e0:	210f      	movs	r1, #15
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2221      	movs	r2, #33	; 0x21
 80008ec:	5c9b      	ldrb	r3, [r3, r2]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d006      	beq.n	8000902 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2204      	movs	r2, #4
 80008f8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2201      	movs	r2, #1
 80008fe:	701a      	strb	r2, [r3, #0]
 8000900:	e028      	b.n	8000954 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	210e      	movs	r1, #14
 800090e:	438a      	bics	r2, r1
 8000910:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2101      	movs	r1, #1
 800091e:	438a      	bics	r2, r1
 8000920:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800092a:	2101      	movs	r1, #1
 800092c:	4091      	lsls	r1, r2
 800092e:	000a      	movs	r2, r1
 8000930:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2221      	movs	r2, #33	; 0x21
 8000936:	2101      	movs	r1, #1
 8000938:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2220      	movs	r2, #32
 800093e:	2100      	movs	r1, #0
 8000940:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000946:	2b00      	cmp	r3, #0
 8000948:	d004      	beq.n	8000954 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	0010      	movs	r0, r2
 8000952:	4798      	blx	r3
    }
  }
  return status;
 8000954:	230f      	movs	r3, #15
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	781b      	ldrb	r3, [r3, #0]
}
 800095a:	0018      	movs	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	b004      	add	sp, #16
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000972:	e155      	b.n	8000c20 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2101      	movs	r1, #1
 800097a:	697a      	ldr	r2, [r7, #20]
 800097c:	4091      	lsls	r1, r2
 800097e:	000a      	movs	r2, r1
 8000980:	4013      	ands	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d100      	bne.n	800098c <HAL_GPIO_Init+0x28>
 800098a:	e146      	b.n	8000c1a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	2203      	movs	r2, #3
 8000992:	4013      	ands	r3, r2
 8000994:	2b01      	cmp	r3, #1
 8000996:	d005      	beq.n	80009a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	2203      	movs	r2, #3
 800099e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d130      	bne.n	8000a06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	2203      	movs	r2, #3
 80009b0:	409a      	lsls	r2, r3
 80009b2:	0013      	movs	r3, r2
 80009b4:	43da      	mvns	r2, r3
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	4013      	ands	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68da      	ldr	r2, [r3, #12]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	409a      	lsls	r2, r3
 80009c6:	0013      	movs	r3, r2
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009da:	2201      	movs	r2, #1
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	409a      	lsls	r2, r3
 80009e0:	0013      	movs	r3, r2
 80009e2:	43da      	mvns	r2, r3
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	091b      	lsrs	r3, r3, #4
 80009f0:	2201      	movs	r2, #1
 80009f2:	401a      	ands	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	409a      	lsls	r2, r3
 80009f8:	0013      	movs	r3, r2
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d017      	beq.n	8000a42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	409a      	lsls	r2, r3
 8000a20:	0013      	movs	r3, r2
 8000a22:	43da      	mvns	r2, r3
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	409a      	lsls	r2, r3
 8000a34:	0013      	movs	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2203      	movs	r2, #3
 8000a48:	4013      	ands	r3, r2
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d123      	bne.n	8000a96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	08da      	lsrs	r2, r3, #3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3208      	adds	r2, #8
 8000a56:	0092      	lsls	r2, r2, #2
 8000a58:	58d3      	ldr	r3, [r2, r3]
 8000a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	2207      	movs	r2, #7
 8000a60:	4013      	ands	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	220f      	movs	r2, #15
 8000a66:	409a      	lsls	r2, r3
 8000a68:	0013      	movs	r3, r2
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	691a      	ldr	r2, [r3, #16]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	2107      	movs	r1, #7
 8000a7a:	400b      	ands	r3, r1
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	409a      	lsls	r2, r3
 8000a80:	0013      	movs	r3, r2
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	08da      	lsrs	r2, r3, #3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3208      	adds	r2, #8
 8000a90:	0092      	lsls	r2, r2, #2
 8000a92:	6939      	ldr	r1, [r7, #16]
 8000a94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	409a      	lsls	r2, r3
 8000aa4:	0013      	movs	r3, r2
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	401a      	ands	r2, r3
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	409a      	lsls	r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	23c0      	movs	r3, #192	; 0xc0
 8000ad0:	029b      	lsls	r3, r3, #10
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	d100      	bne.n	8000ad8 <HAL_GPIO_Init+0x174>
 8000ad6:	e0a0      	b.n	8000c1a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad8:	4b57      	ldr	r3, [pc, #348]	; (8000c38 <HAL_GPIO_Init+0x2d4>)
 8000ada:	699a      	ldr	r2, [r3, #24]
 8000adc:	4b56      	ldr	r3, [pc, #344]	; (8000c38 <HAL_GPIO_Init+0x2d4>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	619a      	str	r2, [r3, #24]
 8000ae4:	4b54      	ldr	r3, [pc, #336]	; (8000c38 <HAL_GPIO_Init+0x2d4>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4013      	ands	r3, r2
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000af0:	4a52      	ldr	r2, [pc, #328]	; (8000c3c <HAL_GPIO_Init+0x2d8>)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3302      	adds	r3, #2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	589b      	ldr	r3, [r3, r2]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	2203      	movs	r2, #3
 8000b02:	4013      	ands	r3, r2
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	220f      	movs	r2, #15
 8000b08:	409a      	lsls	r2, r3
 8000b0a:	0013      	movs	r3, r2
 8000b0c:	43da      	mvns	r2, r3
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	2390      	movs	r3, #144	; 0x90
 8000b18:	05db      	lsls	r3, r3, #23
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d019      	beq.n	8000b52 <HAL_GPIO_Init+0x1ee>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	4a47      	ldr	r2, [pc, #284]	; (8000c40 <HAL_GPIO_Init+0x2dc>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d013      	beq.n	8000b4e <HAL_GPIO_Init+0x1ea>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a46      	ldr	r2, [pc, #280]	; (8000c44 <HAL_GPIO_Init+0x2e0>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d00d      	beq.n	8000b4a <HAL_GPIO_Init+0x1e6>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a45      	ldr	r2, [pc, #276]	; (8000c48 <HAL_GPIO_Init+0x2e4>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d007      	beq.n	8000b46 <HAL_GPIO_Init+0x1e2>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a44      	ldr	r2, [pc, #272]	; (8000c4c <HAL_GPIO_Init+0x2e8>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <HAL_GPIO_Init+0x1de>
 8000b3e:	2304      	movs	r3, #4
 8000b40:	e008      	b.n	8000b54 <HAL_GPIO_Init+0x1f0>
 8000b42:	2305      	movs	r3, #5
 8000b44:	e006      	b.n	8000b54 <HAL_GPIO_Init+0x1f0>
 8000b46:	2303      	movs	r3, #3
 8000b48:	e004      	b.n	8000b54 <HAL_GPIO_Init+0x1f0>
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	e002      	b.n	8000b54 <HAL_GPIO_Init+0x1f0>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <HAL_GPIO_Init+0x1f0>
 8000b52:	2300      	movs	r3, #0
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	2103      	movs	r1, #3
 8000b58:	400a      	ands	r2, r1
 8000b5a:	0092      	lsls	r2, r2, #2
 8000b5c:	4093      	lsls	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b64:	4935      	ldr	r1, [pc, #212]	; (8000c3c <HAL_GPIO_Init+0x2d8>)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	089b      	lsrs	r3, r3, #2
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b72:	4b37      	ldr	r3, [pc, #220]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	2380      	movs	r3, #128	; 0x80
 8000b88:	035b      	lsls	r3, r3, #13
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	d003      	beq.n	8000b96 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b96:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b9c:	4b2c      	ldr	r3, [pc, #176]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	43da      	mvns	r2, r3
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685a      	ldr	r2, [r3, #4]
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	039b      	lsls	r3, r3, #14
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000bc6:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	2380      	movs	r3, #128	; 0x80
 8000bdc:	029b      	lsls	r3, r3, #10
 8000bde:	4013      	ands	r3, r2
 8000be0:	d003      	beq.n	8000bea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	43da      	mvns	r2, r3
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	025b      	lsls	r3, r3, #9
 8000c08:	4013      	ands	r3, r2
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_GPIO_Init+0x2ec>)
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	40da      	lsrs	r2, r3
 8000c28:	1e13      	subs	r3, r2, #0
 8000c2a:	d000      	beq.n	8000c2e <HAL_GPIO_Init+0x2ca>
 8000c2c:	e6a2      	b.n	8000974 <HAL_GPIO_Init+0x10>
  } 
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b006      	add	sp, #24
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010000 	.word	0x40010000
 8000c40:	48000400 	.word	0x48000400
 8000c44:	48000800 	.word	0x48000800
 8000c48:	48000c00 	.word	0x48000c00
 8000c4c:	48001000 	.word	0x48001000
 8000c50:	40010400 	.word	0x40010400

08000c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	0008      	movs	r0, r1
 8000c5e:	0011      	movs	r1, r2
 8000c60:	1cbb      	adds	r3, r7, #2
 8000c62:	1c02      	adds	r2, r0, #0
 8000c64:	801a      	strh	r2, [r3, #0]
 8000c66:	1c7b      	adds	r3, r7, #1
 8000c68:	1c0a      	adds	r2, r1, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c6c:	1c7b      	adds	r3, r7, #1
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d004      	beq.n	8000c7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c74:	1cbb      	adds	r3, r7, #2
 8000c76:	881a      	ldrh	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c7c:	e003      	b.n	8000c86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c7e:	1cbb      	adds	r3, r7, #2
 8000c80:	881a      	ldrh	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b002      	add	sp, #8
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d102      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f000 fb76 	bl	8001390 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4013      	ands	r3, r2
 8000cac:	d100      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x20>
 8000cae:	e08e      	b.n	8000dce <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cb0:	4bc5      	ldr	r3, [pc, #788]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	220c      	movs	r2, #12
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	d00e      	beq.n	8000cda <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cbc:	4bc2      	ldr	r3, [pc, #776]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	220c      	movs	r2, #12
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	2b08      	cmp	r3, #8
 8000cc6:	d117      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x68>
 8000cc8:	4bbf      	ldr	r3, [pc, #764]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	23c0      	movs	r3, #192	; 0xc0
 8000cce:	025b      	lsls	r3, r3, #9
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	025b      	lsls	r3, r3, #9
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d10e      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cda:	4bbb      	ldr	r3, [pc, #748]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	029b      	lsls	r3, r3, #10
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	d100      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x58>
 8000ce6:	e071      	b.n	8000dcc <HAL_RCC_OscConfig+0x13c>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d000      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x62>
 8000cf0:	e06c      	b.n	8000dcc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f000 fb4c 	bl	8001390 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d107      	bne.n	8000d10 <HAL_RCC_OscConfig+0x80>
 8000d00:	4bb1      	ldr	r3, [pc, #708]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4bb0      	ldr	r3, [pc, #704]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	0249      	lsls	r1, r1, #9
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	e02f      	b.n	8000d70 <HAL_RCC_OscConfig+0xe0>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10c      	bne.n	8000d32 <HAL_RCC_OscConfig+0xa2>
 8000d18:	4bab      	ldr	r3, [pc, #684]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4baa      	ldr	r3, [pc, #680]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d1e:	49ab      	ldr	r1, [pc, #684]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d20:	400a      	ands	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	4ba8      	ldr	r3, [pc, #672]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4ba7      	ldr	r3, [pc, #668]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d2a:	49a9      	ldr	r1, [pc, #676]	; (8000fd0 <HAL_RCC_OscConfig+0x340>)
 8000d2c:	400a      	ands	r2, r1
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	e01e      	b.n	8000d70 <HAL_RCC_OscConfig+0xe0>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b05      	cmp	r3, #5
 8000d38:	d10e      	bne.n	8000d58 <HAL_RCC_OscConfig+0xc8>
 8000d3a:	4ba3      	ldr	r3, [pc, #652]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4ba2      	ldr	r3, [pc, #648]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	02c9      	lsls	r1, r1, #11
 8000d44:	430a      	orrs	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	4b9f      	ldr	r3, [pc, #636]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b9e      	ldr	r3, [pc, #632]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d4e:	2180      	movs	r1, #128	; 0x80
 8000d50:	0249      	lsls	r1, r1, #9
 8000d52:	430a      	orrs	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e00b      	b.n	8000d70 <HAL_RCC_OscConfig+0xe0>
 8000d58:	4b9b      	ldr	r3, [pc, #620]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b9a      	ldr	r3, [pc, #616]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d5e:	499b      	ldr	r1, [pc, #620]	; (8000fcc <HAL_RCC_OscConfig+0x33c>)
 8000d60:	400a      	ands	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	4b98      	ldr	r3, [pc, #608]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b97      	ldr	r3, [pc, #604]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d6a:	4999      	ldr	r1, [pc, #612]	; (8000fd0 <HAL_RCC_OscConfig+0x340>)
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d014      	beq.n	8000da2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d78:	f7ff fc8e 	bl	8000698 <HAL_GetTick>
 8000d7c:	0003      	movs	r3, r0
 8000d7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d80:	e008      	b.n	8000d94 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d82:	f7ff fc89 	bl	8000698 <HAL_GetTick>
 8000d86:	0002      	movs	r2, r0
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	2b64      	cmp	r3, #100	; 0x64
 8000d8e:	d901      	bls.n	8000d94 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000d90:	2303      	movs	r3, #3
 8000d92:	e2fd      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d94:	4b8c      	ldr	r3, [pc, #560]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	029b      	lsls	r3, r3, #10
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	d0f0      	beq.n	8000d82 <HAL_RCC_OscConfig+0xf2>
 8000da0:	e015      	b.n	8000dce <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da2:	f7ff fc79 	bl	8000698 <HAL_GetTick>
 8000da6:	0003      	movs	r3, r0
 8000da8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dac:	f7ff fc74 	bl	8000698 <HAL_GetTick>
 8000db0:	0002      	movs	r2, r0
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b64      	cmp	r3, #100	; 0x64
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e2e8      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dbe:	4b82      	ldr	r3, [pc, #520]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	029b      	lsls	r3, r3, #10
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	d1f0      	bne.n	8000dac <HAL_RCC_OscConfig+0x11c>
 8000dca:	e000      	b.n	8000dce <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dcc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d100      	bne.n	8000dda <HAL_RCC_OscConfig+0x14a>
 8000dd8:	e06c      	b.n	8000eb4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dda:	4b7b      	ldr	r3, [pc, #492]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	220c      	movs	r2, #12
 8000de0:	4013      	ands	r3, r2
 8000de2:	d00e      	beq.n	8000e02 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000de4:	4b78      	ldr	r3, [pc, #480]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	220c      	movs	r2, #12
 8000dea:	4013      	ands	r3, r2
 8000dec:	2b08      	cmp	r3, #8
 8000dee:	d11f      	bne.n	8000e30 <HAL_RCC_OscConfig+0x1a0>
 8000df0:	4b75      	ldr	r3, [pc, #468]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	23c0      	movs	r3, #192	; 0xc0
 8000df6:	025b      	lsls	r3, r3, #9
 8000df8:	401a      	ands	r2, r3
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d116      	bne.n	8000e30 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e02:	4b71      	ldr	r3, [pc, #452]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2202      	movs	r2, #2
 8000e08:	4013      	ands	r3, r2
 8000e0a:	d005      	beq.n	8000e18 <HAL_RCC_OscConfig+0x188>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d001      	beq.n	8000e18 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e2bb      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e18:	4b6b      	ldr	r3, [pc, #428]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	22f8      	movs	r2, #248	; 0xf8
 8000e1e:	4393      	bics	r3, r2
 8000e20:	0019      	movs	r1, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	00da      	lsls	r2, r3, #3
 8000e28:	4b67      	ldr	r3, [pc, #412]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2e:	e041      	b.n	8000eb4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d024      	beq.n	8000e82 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e38:	4b63      	ldr	r3, [pc, #396]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b62      	ldr	r3, [pc, #392]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e3e:	2101      	movs	r1, #1
 8000e40:	430a      	orrs	r2, r1
 8000e42:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e44:	f7ff fc28 	bl	8000698 <HAL_GetTick>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4c:	e008      	b.n	8000e60 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e4e:	f7ff fc23 	bl	8000698 <HAL_GetTick>
 8000e52:	0002      	movs	r2, r0
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e297      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e60:	4b59      	ldr	r3, [pc, #356]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2202      	movs	r2, #2
 8000e66:	4013      	ands	r3, r2
 8000e68:	d0f1      	beq.n	8000e4e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6a:	4b57      	ldr	r3, [pc, #348]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	22f8      	movs	r2, #248	; 0xf8
 8000e70:	4393      	bics	r3, r2
 8000e72:	0019      	movs	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	00da      	lsls	r2, r3, #3
 8000e7a:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e018      	b.n	8000eb4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e82:	4b51      	ldr	r3, [pc, #324]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b50      	ldr	r3, [pc, #320]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000e88:	2101      	movs	r1, #1
 8000e8a:	438a      	bics	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8e:	f7ff fc03 	bl	8000698 <HAL_GetTick>
 8000e92:	0003      	movs	r3, r0
 8000e94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e98:	f7ff fbfe 	bl	8000698 <HAL_GetTick>
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e272      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eaa:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2202      	movs	r2, #2
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d1f1      	bne.n	8000e98 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2208      	movs	r2, #8
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d036      	beq.n	8000f2c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d019      	beq.n	8000efa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ec6:	4b40      	ldr	r3, [pc, #256]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eca:	4b3f      	ldr	r3, [pc, #252]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed2:	f7ff fbe1 	bl	8000698 <HAL_GetTick>
 8000ed6:	0003      	movs	r3, r0
 8000ed8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000edc:	f7ff fbdc 	bl	8000698 <HAL_GetTick>
 8000ee0:	0002      	movs	r2, r0
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e250      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eee:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d0f1      	beq.n	8000edc <HAL_RCC_OscConfig+0x24c>
 8000ef8:	e018      	b.n	8000f2c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000efe:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000f00:	2101      	movs	r1, #1
 8000f02:	438a      	bics	r2, r1
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f06:	f7ff fbc7 	bl	8000698 <HAL_GetTick>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f10:	f7ff fbc2 	bl	8000698 <HAL_GetTick>
 8000f14:	0002      	movs	r2, r0
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e236      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f22:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	2202      	movs	r2, #2
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d1f1      	bne.n	8000f10 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2204      	movs	r2, #4
 8000f32:	4013      	ands	r3, r2
 8000f34:	d100      	bne.n	8000f38 <HAL_RCC_OscConfig+0x2a8>
 8000f36:	e0b5      	b.n	80010a4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f38:	201f      	movs	r0, #31
 8000f3a:	183b      	adds	r3, r7, r0
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f40:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000f42:	69da      	ldr	r2, [r3, #28]
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	055b      	lsls	r3, r3, #21
 8000f48:	4013      	ands	r3, r2
 8000f4a:	d110      	bne.n	8000f6e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000f4e:	69da      	ldr	r2, [r3, #28]
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	0549      	lsls	r1, r1, #21
 8000f56:	430a      	orrs	r2, r1
 8000f58:	61da      	str	r2, [r3, #28]
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000f5c:	69da      	ldr	r2, [r3, #28]
 8000f5e:	2380      	movs	r3, #128	; 0x80
 8000f60:	055b      	lsls	r3, r3, #21
 8000f62:	4013      	ands	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f68:	183b      	adds	r3, r7, r0
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_RCC_OscConfig+0x344>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4013      	ands	r3, r2
 8000f78:	d11a      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_RCC_OscConfig+0x344>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_RCC_OscConfig+0x344>)
 8000f80:	2180      	movs	r1, #128	; 0x80
 8000f82:	0049      	lsls	r1, r1, #1
 8000f84:	430a      	orrs	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f88:	f7ff fb86 	bl	8000698 <HAL_GetTick>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f92:	f7ff fb81 	bl	8000698 <HAL_GetTick>
 8000f96:	0002      	movs	r2, r0
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b64      	cmp	r3, #100	; 0x64
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e1f5      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_RCC_OscConfig+0x344>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4013      	ands	r3, r2
 8000fae:	d0f0      	beq.n	8000f92 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d10f      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x348>
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	4b02      	ldr	r3, [pc, #8]	; (8000fc8 <HAL_RCC_OscConfig+0x338>)
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	621a      	str	r2, [r3, #32]
 8000fc4:	e036      	b.n	8001034 <HAL_RCC_OscConfig+0x3a4>
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	fffeffff 	.word	0xfffeffff
 8000fd0:	fffbffff 	.word	0xfffbffff
 8000fd4:	40007000 	.word	0x40007000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10c      	bne.n	8000ffa <HAL_RCC_OscConfig+0x36a>
 8000fe0:	4bca      	ldr	r3, [pc, #808]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8000fe2:	6a1a      	ldr	r2, [r3, #32]
 8000fe4:	4bc9      	ldr	r3, [pc, #804]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	438a      	bics	r2, r1
 8000fea:	621a      	str	r2, [r3, #32]
 8000fec:	4bc7      	ldr	r3, [pc, #796]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8000fee:	6a1a      	ldr	r2, [r3, #32]
 8000ff0:	4bc6      	ldr	r3, [pc, #792]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	438a      	bics	r2, r1
 8000ff6:	621a      	str	r2, [r3, #32]
 8000ff8:	e01c      	b.n	8001034 <HAL_RCC_OscConfig+0x3a4>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	2b05      	cmp	r3, #5
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x38c>
 8001002:	4bc2      	ldr	r3, [pc, #776]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001004:	6a1a      	ldr	r2, [r3, #32]
 8001006:	4bc1      	ldr	r3, [pc, #772]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001008:	2104      	movs	r1, #4
 800100a:	430a      	orrs	r2, r1
 800100c:	621a      	str	r2, [r3, #32]
 800100e:	4bbf      	ldr	r3, [pc, #764]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001010:	6a1a      	ldr	r2, [r3, #32]
 8001012:	4bbe      	ldr	r3, [pc, #760]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001014:	2101      	movs	r1, #1
 8001016:	430a      	orrs	r2, r1
 8001018:	621a      	str	r2, [r3, #32]
 800101a:	e00b      	b.n	8001034 <HAL_RCC_OscConfig+0x3a4>
 800101c:	4bbb      	ldr	r3, [pc, #748]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800101e:	6a1a      	ldr	r2, [r3, #32]
 8001020:	4bba      	ldr	r3, [pc, #744]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001022:	2101      	movs	r1, #1
 8001024:	438a      	bics	r2, r1
 8001026:	621a      	str	r2, [r3, #32]
 8001028:	4bb8      	ldr	r3, [pc, #736]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800102a:	6a1a      	ldr	r2, [r3, #32]
 800102c:	4bb7      	ldr	r3, [pc, #732]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800102e:	2104      	movs	r1, #4
 8001030:	438a      	bics	r2, r1
 8001032:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d014      	beq.n	8001066 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103c:	f7ff fb2c 	bl	8000698 <HAL_GetTick>
 8001040:	0003      	movs	r3, r0
 8001042:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001044:	e009      	b.n	800105a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001046:	f7ff fb27 	bl	8000698 <HAL_GetTick>
 800104a:	0002      	movs	r2, r0
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	4aaf      	ldr	r2, [pc, #700]	; (8001310 <HAL_RCC_OscConfig+0x680>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e19a      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800105a:	4bac      	ldr	r3, [pc, #688]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	2202      	movs	r2, #2
 8001060:	4013      	ands	r3, r2
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x3b6>
 8001064:	e013      	b.n	800108e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001066:	f7ff fb17 	bl	8000698 <HAL_GetTick>
 800106a:	0003      	movs	r3, r0
 800106c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106e:	e009      	b.n	8001084 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001070:	f7ff fb12 	bl	8000698 <HAL_GetTick>
 8001074:	0002      	movs	r2, r0
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	4aa5      	ldr	r2, [pc, #660]	; (8001310 <HAL_RCC_OscConfig+0x680>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e185      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001084:	4ba1      	ldr	r3, [pc, #644]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	2202      	movs	r2, #2
 800108a:	4013      	ands	r3, r2
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800108e:	231f      	movs	r3, #31
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d105      	bne.n	80010a4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001098:	4b9c      	ldr	r3, [pc, #624]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800109a:	69da      	ldr	r2, [r3, #28]
 800109c:	4b9b      	ldr	r3, [pc, #620]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800109e:	499d      	ldr	r1, [pc, #628]	; (8001314 <HAL_RCC_OscConfig+0x684>)
 80010a0:	400a      	ands	r2, r1
 80010a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2210      	movs	r2, #16
 80010aa:	4013      	ands	r3, r2
 80010ac:	d063      	beq.n	8001176 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d12a      	bne.n	800110c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010b6:	4b95      	ldr	r3, [pc, #596]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80010b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ba:	4b94      	ldr	r3, [pc, #592]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80010bc:	2104      	movs	r1, #4
 80010be:	430a      	orrs	r2, r1
 80010c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80010c2:	4b92      	ldr	r3, [pc, #584]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80010c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c6:	4b91      	ldr	r3, [pc, #580]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80010c8:	2101      	movs	r1, #1
 80010ca:	430a      	orrs	r2, r1
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ce:	f7ff fae3 	bl	8000698 <HAL_GetTick>
 80010d2:	0003      	movs	r3, r0
 80010d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010d8:	f7ff fade 	bl	8000698 <HAL_GetTick>
 80010dc:	0002      	movs	r2, r0
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e152      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80010ea:	4b88      	ldr	r3, [pc, #544]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80010ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ee:	2202      	movs	r2, #2
 80010f0:	4013      	ands	r3, r2
 80010f2:	d0f1      	beq.n	80010d8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010f4:	4b85      	ldr	r3, [pc, #532]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80010f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f8:	22f8      	movs	r2, #248	; 0xf8
 80010fa:	4393      	bics	r3, r2
 80010fc:	0019      	movs	r1, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	00da      	lsls	r2, r3, #3
 8001104:	4b81      	ldr	r3, [pc, #516]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001106:	430a      	orrs	r2, r1
 8001108:	635a      	str	r2, [r3, #52]	; 0x34
 800110a:	e034      	b.n	8001176 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	3305      	adds	r3, #5
 8001112:	d111      	bne.n	8001138 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001114:	4b7d      	ldr	r3, [pc, #500]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001118:	4b7c      	ldr	r3, [pc, #496]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800111a:	2104      	movs	r1, #4
 800111c:	438a      	bics	r2, r1
 800111e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001120:	4b7a      	ldr	r3, [pc, #488]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001124:	22f8      	movs	r2, #248	; 0xf8
 8001126:	4393      	bics	r3, r2
 8001128:	0019      	movs	r1, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	00da      	lsls	r2, r3, #3
 8001130:	4b76      	ldr	r3, [pc, #472]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001132:	430a      	orrs	r2, r1
 8001134:	635a      	str	r2, [r3, #52]	; 0x34
 8001136:	e01e      	b.n	8001176 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001138:	4b74      	ldr	r3, [pc, #464]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800113a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800113c:	4b73      	ldr	r3, [pc, #460]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800113e:	2104      	movs	r1, #4
 8001140:	430a      	orrs	r2, r1
 8001142:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001144:	4b71      	ldr	r3, [pc, #452]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001148:	4b70      	ldr	r3, [pc, #448]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800114a:	2101      	movs	r1, #1
 800114c:	438a      	bics	r2, r1
 800114e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001150:	f7ff faa2 	bl	8000698 <HAL_GetTick>
 8001154:	0003      	movs	r3, r0
 8001156:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800115a:	f7ff fa9d 	bl	8000698 <HAL_GetTick>
 800115e:	0002      	movs	r2, r0
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e111      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800116c:	4b67      	ldr	r3, [pc, #412]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800116e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001170:	2202      	movs	r2, #2
 8001172:	4013      	ands	r3, r2
 8001174:	d1f1      	bne.n	800115a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2220      	movs	r2, #32
 800117c:	4013      	ands	r3, r2
 800117e:	d05c      	beq.n	800123a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001180:	4b62      	ldr	r3, [pc, #392]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	220c      	movs	r2, #12
 8001186:	4013      	ands	r3, r2
 8001188:	2b0c      	cmp	r3, #12
 800118a:	d00e      	beq.n	80011aa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800118c:	4b5f      	ldr	r3, [pc, #380]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	220c      	movs	r2, #12
 8001192:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001194:	2b08      	cmp	r3, #8
 8001196:	d114      	bne.n	80011c2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001198:	4b5c      	ldr	r3, [pc, #368]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	23c0      	movs	r3, #192	; 0xc0
 800119e:	025b      	lsls	r3, r3, #9
 80011a0:	401a      	ands	r2, r3
 80011a2:	23c0      	movs	r3, #192	; 0xc0
 80011a4:	025b      	lsls	r3, r3, #9
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d10b      	bne.n	80011c2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011aa:	4b58      	ldr	r3, [pc, #352]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80011ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	029b      	lsls	r3, r3, #10
 80011b2:	4013      	ands	r3, r2
 80011b4:	d040      	beq.n	8001238 <HAL_RCC_OscConfig+0x5a8>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d03c      	beq.n	8001238 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e0e6      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d01b      	beq.n	8001202 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80011ca:	4b50      	ldr	r3, [pc, #320]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80011cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ce:	4b4f      	ldr	r3, [pc, #316]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	0249      	lsls	r1, r1, #9
 80011d4:	430a      	orrs	r2, r1
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fa5e 	bl	8000698 <HAL_GetTick>
 80011dc:	0003      	movs	r3, r0
 80011de:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011e2:	f7ff fa59 	bl	8000698 <HAL_GetTick>
 80011e6:	0002      	movs	r2, r0
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e0cd      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80011f4:	4b45      	ldr	r3, [pc, #276]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80011f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	029b      	lsls	r3, r3, #10
 80011fc:	4013      	ands	r3, r2
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x552>
 8001200:	e01b      	b.n	800123a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001202:	4b42      	ldr	r3, [pc, #264]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001206:	4b41      	ldr	r3, [pc, #260]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001208:	4943      	ldr	r1, [pc, #268]	; (8001318 <HAL_RCC_OscConfig+0x688>)
 800120a:	400a      	ands	r2, r1
 800120c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120e:	f7ff fa43 	bl	8000698 <HAL_GetTick>
 8001212:	0003      	movs	r3, r0
 8001214:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001218:	f7ff fa3e 	bl	8000698 <HAL_GetTick>
 800121c:	0002      	movs	r2, r0
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e0b2      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800122a:	4b38      	ldr	r3, [pc, #224]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800122c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	029b      	lsls	r3, r3, #10
 8001232:	4013      	ands	r3, r2
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x588>
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001238:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	2b00      	cmp	r3, #0
 8001240:	d100      	bne.n	8001244 <HAL_RCC_OscConfig+0x5b4>
 8001242:	e0a4      	b.n	800138e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	220c      	movs	r2, #12
 800124a:	4013      	ands	r3, r2
 800124c:	2b08      	cmp	r3, #8
 800124e:	d100      	bne.n	8001252 <HAL_RCC_OscConfig+0x5c2>
 8001250:	e078      	b.n	8001344 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	2b02      	cmp	r3, #2
 8001258:	d14c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b2b      	ldr	r3, [pc, #172]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001260:	492e      	ldr	r1, [pc, #184]	; (800131c <HAL_RCC_OscConfig+0x68c>)
 8001262:	400a      	ands	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff fa17 	bl	8000698 <HAL_GetTick>
 800126a:	0003      	movs	r3, r0
 800126c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001270:	f7ff fa12 	bl	8000698 <HAL_GetTick>
 8001274:	0002      	movs	r2, r0
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e086      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	049b      	lsls	r3, r3, #18
 800128a:	4013      	ands	r3, r2
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800128e:	4b1f      	ldr	r3, [pc, #124]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 8001290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001292:	220f      	movs	r2, #15
 8001294:	4393      	bics	r3, r2
 8001296:	0019      	movs	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 800129e:	430a      	orrs	r2, r1
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <HAL_RCC_OscConfig+0x690>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b4:	431a      	orrs	r2, r3
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80012b8:	430a      	orrs	r2, r1
 80012ba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	0449      	lsls	r1, r1, #17
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff f9e5 	bl	8000698 <HAL_GetTick>
 80012ce:	0003      	movs	r3, r0
 80012d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d4:	f7ff f9e0 	bl	8000698 <HAL_GetTick>
 80012d8:	0002      	movs	r2, r0
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e054      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	049b      	lsls	r3, r3, #18
 80012ee:	4013      	ands	r3, r2
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0x644>
 80012f2:	e04c      	b.n	800138e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <HAL_RCC_OscConfig+0x67c>)
 80012fa:	4908      	ldr	r1, [pc, #32]	; (800131c <HAL_RCC_OscConfig+0x68c>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff f9ca 	bl	8000698 <HAL_GetTick>
 8001304:	0003      	movs	r3, r0
 8001306:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001308:	e015      	b.n	8001336 <HAL_RCC_OscConfig+0x6a6>
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	40021000 	.word	0x40021000
 8001310:	00001388 	.word	0x00001388
 8001314:	efffffff 	.word	0xefffffff
 8001318:	fffeffff 	.word	0xfffeffff
 800131c:	feffffff 	.word	0xfeffffff
 8001320:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff f9b8 	bl	8000698 <HAL_GetTick>
 8001328:	0002      	movs	r2, r0
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e02c      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_RCC_OscConfig+0x708>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	049b      	lsls	r3, r3, #18
 800133e:	4013      	ands	r3, r2
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x694>
 8001342:	e024      	b.n	800138e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e01f      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_RCC_OscConfig+0x708>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_RCC_OscConfig+0x708>)
 8001358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	23c0      	movs	r3, #192	; 0xc0
 8001360:	025b      	lsls	r3, r3, #9
 8001362:	401a      	ands	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	429a      	cmp	r2, r3
 800136a:	d10e      	bne.n	800138a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	220f      	movs	r2, #15
 8001370:	401a      	ands	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001376:	429a      	cmp	r2, r3
 8001378:	d107      	bne.n	800138a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	23f0      	movs	r3, #240	; 0xf0
 800137e:	039b      	lsls	r3, r3, #14
 8001380:	401a      	ands	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001386:	429a      	cmp	r2, r3
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	0018      	movs	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	b008      	add	sp, #32
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0bf      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b0:	4b61      	ldr	r3, [pc, #388]	; (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4013      	ands	r3, r2
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d911      	bls.n	80013e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013be:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2201      	movs	r2, #1
 80013c4:	4393      	bics	r3, r2
 80013c6:	0019      	movs	r1, r3
 80013c8:	4b5b      	ldr	r3, [pc, #364]	; (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d0:	4b59      	ldr	r3, [pc, #356]	; (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2201      	movs	r2, #1
 80013d6:	4013      	ands	r3, r2
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0a6      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2202      	movs	r2, #2
 80013e8:	4013      	ands	r3, r2
 80013ea:	d015      	beq.n	8001418 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2204      	movs	r2, #4
 80013f2:	4013      	ands	r3, r2
 80013f4:	d006      	beq.n	8001404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80013f6:	4b51      	ldr	r3, [pc, #324]	; (800153c <HAL_RCC_ClockConfig+0x1a0>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4b50      	ldr	r3, [pc, #320]	; (800153c <HAL_RCC_ClockConfig+0x1a0>)
 80013fc:	21e0      	movs	r1, #224	; 0xe0
 80013fe:	00c9      	lsls	r1, r1, #3
 8001400:	430a      	orrs	r2, r1
 8001402:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001404:	4b4d      	ldr	r3, [pc, #308]	; (800153c <HAL_RCC_ClockConfig+0x1a0>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	22f0      	movs	r2, #240	; 0xf0
 800140a:	4393      	bics	r3, r2
 800140c:	0019      	movs	r1, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	4b4a      	ldr	r3, [pc, #296]	; (800153c <HAL_RCC_ClockConfig+0x1a0>)
 8001414:	430a      	orrs	r2, r1
 8001416:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2201      	movs	r2, #1
 800141e:	4013      	ands	r3, r2
 8001420:	d04c      	beq.n	80014bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d107      	bne.n	800143a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b44      	ldr	r3, [pc, #272]	; (800153c <HAL_RCC_ClockConfig+0x1a0>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	029b      	lsls	r3, r3, #10
 8001432:	4013      	ands	r3, r2
 8001434:	d120      	bne.n	8001478 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e07a      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b02      	cmp	r3, #2
 8001440:	d107      	bne.n	8001452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001442:	4b3e      	ldr	r3, [pc, #248]	; (800153c <HAL_RCC_ClockConfig+0x1a0>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	2380      	movs	r3, #128	; 0x80
 8001448:	049b      	lsls	r3, r3, #18
 800144a:	4013      	ands	r3, r2
 800144c:	d114      	bne.n	8001478 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e06e      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d107      	bne.n	800146a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800145a:	4b38      	ldr	r3, [pc, #224]	; (800153c <HAL_RCC_ClockConfig+0x1a0>)
 800145c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	029b      	lsls	r3, r3, #10
 8001462:	4013      	ands	r3, r2
 8001464:	d108      	bne.n	8001478 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e062      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146a:	4b34      	ldr	r3, [pc, #208]	; (800153c <HAL_RCC_ClockConfig+0x1a0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2202      	movs	r2, #2
 8001470:	4013      	ands	r3, r2
 8001472:	d101      	bne.n	8001478 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e05b      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001478:	4b30      	ldr	r3, [pc, #192]	; (800153c <HAL_RCC_ClockConfig+0x1a0>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2203      	movs	r2, #3
 800147e:	4393      	bics	r3, r2
 8001480:	0019      	movs	r1, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_RCC_ClockConfig+0x1a0>)
 8001488:	430a      	orrs	r2, r1
 800148a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800148c:	f7ff f904 	bl	8000698 <HAL_GetTick>
 8001490:	0003      	movs	r3, r0
 8001492:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001494:	e009      	b.n	80014aa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001496:	f7ff f8ff 	bl	8000698 <HAL_GetTick>
 800149a:	0002      	movs	r2, r0
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	4a27      	ldr	r2, [pc, #156]	; (8001540 <HAL_RCC_ClockConfig+0x1a4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e042      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <HAL_RCC_ClockConfig+0x1a0>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	220c      	movs	r2, #12
 80014b0:	401a      	ands	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d1ec      	bne.n	8001496 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2201      	movs	r2, #1
 80014c2:	4013      	ands	r3, r2
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d211      	bcs.n	80014ee <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ca:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2201      	movs	r2, #1
 80014d0:	4393      	bics	r3, r2
 80014d2:	0019      	movs	r1, r3
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <HAL_RCC_ClockConfig+0x19c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2201      	movs	r2, #1
 80014e2:	4013      	ands	r3, r2
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e020      	b.n	8001530 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2204      	movs	r2, #4
 80014f4:	4013      	ands	r3, r2
 80014f6:	d009      	beq.n	800150c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_RCC_ClockConfig+0x1a0>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a11      	ldr	r2, [pc, #68]	; (8001544 <HAL_RCC_ClockConfig+0x1a8>)
 80014fe:	4013      	ands	r3, r2
 8001500:	0019      	movs	r1, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_RCC_ClockConfig+0x1a0>)
 8001508:	430a      	orrs	r2, r1
 800150a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800150c:	f000 f820 	bl	8001550 <HAL_RCC_GetSysClockFreq>
 8001510:	0001      	movs	r1, r0
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_RCC_ClockConfig+0x1a0>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	220f      	movs	r2, #15
 800151a:	4013      	ands	r3, r2
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_RCC_ClockConfig+0x1ac>)
 800151e:	5cd3      	ldrb	r3, [r2, r3]
 8001520:	000a      	movs	r2, r1
 8001522:	40da      	lsrs	r2, r3
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_RCC_ClockConfig+0x1b0>)
 8001526:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff f86f 	bl	800060c <HAL_InitTick>
  
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	b004      	add	sp, #16
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40022000 	.word	0x40022000
 800153c:	40021000 	.word	0x40021000
 8001540:	00001388 	.word	0x00001388
 8001544:	fffff8ff 	.word	0xfffff8ff
 8001548:	080027bc 	.word	0x080027bc
 800154c:	20000010 	.word	0x20000010

08001550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_RCC_GetSysClockFreq+0xd0>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	220c      	movs	r2, #12
 8001574:	4013      	ands	r3, r2
 8001576:	2b0c      	cmp	r3, #12
 8001578:	d046      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0xb8>
 800157a:	d848      	bhi.n	800160e <HAL_RCC_GetSysClockFreq+0xbe>
 800157c:	2b04      	cmp	r3, #4
 800157e:	d002      	beq.n	8001586 <HAL_RCC_GetSysClockFreq+0x36>
 8001580:	2b08      	cmp	r3, #8
 8001582:	d003      	beq.n	800158c <HAL_RCC_GetSysClockFreq+0x3c>
 8001584:	e043      	b.n	800160e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001586:	4b27      	ldr	r3, [pc, #156]	; (8001624 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001588:	613b      	str	r3, [r7, #16]
      break;
 800158a:	e043      	b.n	8001614 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	220f      	movs	r2, #15
 8001592:	4013      	ands	r3, r2
 8001594:	4a24      	ldr	r2, [pc, #144]	; (8001628 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001596:	5cd3      	ldrb	r3, [r2, r3]
 8001598:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_RCC_GetSysClockFreq+0xd0>)
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	220f      	movs	r2, #15
 80015a0:	4013      	ands	r3, r2
 80015a2:	4a22      	ldr	r2, [pc, #136]	; (800162c <HAL_RCC_GetSysClockFreq+0xdc>)
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	23c0      	movs	r3, #192	; 0xc0
 80015ac:	025b      	lsls	r3, r3, #9
 80015ae:	401a      	ands	r2, r3
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	025b      	lsls	r3, r3, #9
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d109      	bne.n	80015cc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	481a      	ldr	r0, [pc, #104]	; (8001624 <HAL_RCC_GetSysClockFreq+0xd4>)
 80015bc:	f7fe fdac 	bl	8000118 <__udivsi3>
 80015c0:	0003      	movs	r3, r0
 80015c2:	001a      	movs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4353      	muls	r3, r2
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e01a      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	23c0      	movs	r3, #192	; 0xc0
 80015d0:	025b      	lsls	r3, r3, #9
 80015d2:	401a      	ands	r2, r3
 80015d4:	23c0      	movs	r3, #192	; 0xc0
 80015d6:	025b      	lsls	r3, r3, #9
 80015d8:	429a      	cmp	r2, r3
 80015da:	d109      	bne.n	80015f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015dc:	68b9      	ldr	r1, [r7, #8]
 80015de:	4814      	ldr	r0, [pc, #80]	; (8001630 <HAL_RCC_GetSysClockFreq+0xe0>)
 80015e0:	f7fe fd9a 	bl	8000118 <__udivsi3>
 80015e4:	0003      	movs	r3, r0
 80015e6:	001a      	movs	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4353      	muls	r3, r2
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	e008      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	480c      	ldr	r0, [pc, #48]	; (8001624 <HAL_RCC_GetSysClockFreq+0xd4>)
 80015f4:	f7fe fd90 	bl	8000118 <__udivsi3>
 80015f8:	0003      	movs	r3, r0
 80015fa:	001a      	movs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4353      	muls	r3, r2
 8001600:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	613b      	str	r3, [r7, #16]
      break;
 8001606:	e005      	b.n	8001614 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_RCC_GetSysClockFreq+0xe0>)
 800160a:	613b      	str	r3, [r7, #16]
      break;
 800160c:	e002      	b.n	8001614 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800160e:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001610:	613b      	str	r3, [r7, #16]
      break;
 8001612:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001614:	693b      	ldr	r3, [r7, #16]
}
 8001616:	0018      	movs	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	b006      	add	sp, #24
 800161c:	bd80      	pop	{r7, pc}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	40021000 	.word	0x40021000
 8001624:	007a1200 	.word	0x007a1200
 8001628:	080027d4 	.word	0x080027d4
 800162c:	080027e4 	.word	0x080027e4
 8001630:	02dc6c00 	.word	0x02dc6c00

08001634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001638:	4b02      	ldr	r3, [pc, #8]	; (8001644 <HAL_RCC_GetHCLKFreq+0x10>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	20000010 	.word	0x20000010

08001648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800164c:	f7ff fff2 	bl	8001634 <HAL_RCC_GetHCLKFreq>
 8001650:	0001      	movs	r1, r0
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	2207      	movs	r2, #7
 800165a:	4013      	ands	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_RCC_GetPCLK1Freq+0x28>)
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	40d9      	lsrs	r1, r3
 8001662:	000b      	movs	r3, r1
}    
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	40021000 	.word	0x40021000
 8001670:	080027cc 	.word	0x080027cc

08001674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e044      	b.n	8001710 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800168a:	2b00      	cmp	r3, #0
 800168c:	d107      	bne.n	800169e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2278      	movs	r2, #120	; 0x78
 8001692:	2100      	movs	r1, #0
 8001694:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	0018      	movs	r0, r3
 800169a:	f7fe fef9 	bl	8000490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2224      	movs	r2, #36	; 0x24
 80016a2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2101      	movs	r1, #1
 80016b0:	438a      	bics	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	0018      	movs	r0, r3
 80016b8:	f000 fb94 	bl	8001de4 <UART_SetConfig>
 80016bc:	0003      	movs	r3, r0
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e024      	b.n	8001710 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f000 fd0f 	bl	80020f4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	490d      	ldr	r1, [pc, #52]	; (8001718 <HAL_UART_Init+0xa4>)
 80016e2:	400a      	ands	r2, r1
 80016e4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	212a      	movs	r1, #42	; 0x2a
 80016f2:	438a      	bics	r2, r1
 80016f4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	430a      	orrs	r2, r1
 8001704:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	0018      	movs	r0, r3
 800170a:	f000 fda7 	bl	800225c <UART_CheckIdleState>
 800170e:	0003      	movs	r3, r0
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	b002      	add	sp, #8
 8001716:	bd80      	pop	{r7, pc}
 8001718:	ffffb7ff 	.word	0xffffb7ff

0800171c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b088      	sub	sp, #32
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	1dbb      	adds	r3, r7, #6
 8001728:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800172e:	2b20      	cmp	r3, #32
 8001730:	d15b      	bne.n	80017ea <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_UART_Transmit_IT+0x24>
 8001738:	1dbb      	adds	r3, r7, #6
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e053      	b.n	80017ec <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	015b      	lsls	r3, r3, #5
 800174c:	429a      	cmp	r2, r3
 800174e:	d109      	bne.n	8001764 <HAL_UART_Transmit_IT+0x48>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d105      	bne.n	8001764 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2201      	movs	r2, #1
 800175c:	4013      	ands	r3, r2
 800175e:	d001      	beq.n	8001764 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e043      	b.n	80017ec <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1dba      	adds	r2, r7, #6
 800176e:	2150      	movs	r1, #80	; 0x50
 8001770:	8812      	ldrh	r2, [r2, #0]
 8001772:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	1dba      	adds	r2, r7, #6
 8001778:	2152      	movs	r1, #82	; 0x52
 800177a:	8812      	ldrh	r2, [r2, #0]
 800177c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2284      	movs	r2, #132	; 0x84
 8001788:	2100      	movs	r1, #0
 800178a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2221      	movs	r2, #33	; 0x21
 8001790:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	015b      	lsls	r3, r3, #5
 800179a:	429a      	cmp	r2, r3
 800179c:	d107      	bne.n	80017ae <HAL_UART_Transmit_IT+0x92>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d103      	bne.n	80017ae <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <HAL_UART_Transmit_IT+0xd8>)
 80017aa:	66da      	str	r2, [r3, #108]	; 0x6c
 80017ac:	e002      	b.n	80017b4 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <HAL_UART_Transmit_IT+0xdc>)
 80017b2:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017b4:	f3ef 8310 	mrs	r3, PRIMASK
 80017b8:	613b      	str	r3, [r7, #16]
  return(result);
 80017ba:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	2301      	movs	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f383 8810 	msr	PRIMASK, r3
}
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2180      	movs	r1, #128	; 0x80
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	f383 8810 	msr	PRIMASK, r3
}
 80017e4:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e000      	b.n	80017ec <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80017ea:	2302      	movs	r3, #2
  }
}
 80017ec:	0018      	movs	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b008      	add	sp, #32
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	0800262b 	.word	0x0800262b
 80017f8:	08002577 	.word	0x08002577

080017fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b0ab      	sub	sp, #172	; 0xac
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	22a4      	movs	r2, #164	; 0xa4
 800180c:	18b9      	adds	r1, r7, r2
 800180e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	20a0      	movs	r0, #160	; 0xa0
 8001818:	1839      	adds	r1, r7, r0
 800181a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	219c      	movs	r1, #156	; 0x9c
 8001824:	1879      	adds	r1, r7, r1
 8001826:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001828:	0011      	movs	r1, r2
 800182a:	18bb      	adds	r3, r7, r2
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a99      	ldr	r2, [pc, #612]	; (8001a94 <HAL_UART_IRQHandler+0x298>)
 8001830:	4013      	ands	r3, r2
 8001832:	2298      	movs	r2, #152	; 0x98
 8001834:	18bc      	adds	r4, r7, r2
 8001836:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8001838:	18bb      	adds	r3, r7, r2
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d114      	bne.n	800186a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001840:	187b      	adds	r3, r7, r1
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2220      	movs	r2, #32
 8001846:	4013      	ands	r3, r2
 8001848:	d00f      	beq.n	800186a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800184a:	183b      	adds	r3, r7, r0
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2220      	movs	r2, #32
 8001850:	4013      	ands	r3, r2
 8001852:	d00a      	beq.n	800186a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001858:	2b00      	cmp	r3, #0
 800185a:	d100      	bne.n	800185e <HAL_UART_IRQHandler+0x62>
 800185c:	e29e      	b.n	8001d9c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	0010      	movs	r0, r2
 8001866:	4798      	blx	r3
      }
      return;
 8001868:	e298      	b.n	8001d9c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800186a:	2398      	movs	r3, #152	; 0x98
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d100      	bne.n	8001876 <HAL_UART_IRQHandler+0x7a>
 8001874:	e114      	b.n	8001aa0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001876:	239c      	movs	r3, #156	; 0x9c
 8001878:	18fb      	adds	r3, r7, r3
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	4013      	ands	r3, r2
 8001880:	d106      	bne.n	8001890 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001882:	23a0      	movs	r3, #160	; 0xa0
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a83      	ldr	r2, [pc, #524]	; (8001a98 <HAL_UART_IRQHandler+0x29c>)
 800188a:	4013      	ands	r3, r2
 800188c:	d100      	bne.n	8001890 <HAL_UART_IRQHandler+0x94>
 800188e:	e107      	b.n	8001aa0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001890:	23a4      	movs	r3, #164	; 0xa4
 8001892:	18fb      	adds	r3, r7, r3
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2201      	movs	r2, #1
 8001898:	4013      	ands	r3, r2
 800189a:	d012      	beq.n	80018c2 <HAL_UART_IRQHandler+0xc6>
 800189c:	23a0      	movs	r3, #160	; 0xa0
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4013      	ands	r3, r2
 80018a8:	d00b      	beq.n	80018c2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2201      	movs	r2, #1
 80018b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2284      	movs	r2, #132	; 0x84
 80018b6:	589b      	ldr	r3, [r3, r2]
 80018b8:	2201      	movs	r2, #1
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2184      	movs	r1, #132	; 0x84
 80018c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80018c2:	23a4      	movs	r3, #164	; 0xa4
 80018c4:	18fb      	adds	r3, r7, r3
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2202      	movs	r2, #2
 80018ca:	4013      	ands	r3, r2
 80018cc:	d011      	beq.n	80018f2 <HAL_UART_IRQHandler+0xf6>
 80018ce:	239c      	movs	r3, #156	; 0x9c
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2201      	movs	r2, #1
 80018d6:	4013      	ands	r3, r2
 80018d8:	d00b      	beq.n	80018f2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2202      	movs	r2, #2
 80018e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2284      	movs	r2, #132	; 0x84
 80018e6:	589b      	ldr	r3, [r3, r2]
 80018e8:	2204      	movs	r2, #4
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2184      	movs	r1, #132	; 0x84
 80018f0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80018f2:	23a4      	movs	r3, #164	; 0xa4
 80018f4:	18fb      	adds	r3, r7, r3
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2204      	movs	r2, #4
 80018fa:	4013      	ands	r3, r2
 80018fc:	d011      	beq.n	8001922 <HAL_UART_IRQHandler+0x126>
 80018fe:	239c      	movs	r3, #156	; 0x9c
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2201      	movs	r2, #1
 8001906:	4013      	ands	r3, r2
 8001908:	d00b      	beq.n	8001922 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2204      	movs	r2, #4
 8001910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2284      	movs	r2, #132	; 0x84
 8001916:	589b      	ldr	r3, [r3, r2]
 8001918:	2202      	movs	r2, #2
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2184      	movs	r1, #132	; 0x84
 8001920:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001922:	23a4      	movs	r3, #164	; 0xa4
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2208      	movs	r2, #8
 800192a:	4013      	ands	r3, r2
 800192c:	d017      	beq.n	800195e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800192e:	23a0      	movs	r3, #160	; 0xa0
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2220      	movs	r2, #32
 8001936:	4013      	ands	r3, r2
 8001938:	d105      	bne.n	8001946 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800193a:	239c      	movs	r3, #156	; 0x9c
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001944:	d00b      	beq.n	800195e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2208      	movs	r2, #8
 800194c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2284      	movs	r2, #132	; 0x84
 8001952:	589b      	ldr	r3, [r3, r2]
 8001954:	2208      	movs	r2, #8
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2184      	movs	r1, #132	; 0x84
 800195c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800195e:	23a4      	movs	r3, #164	; 0xa4
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4013      	ands	r3, r2
 800196a:	d013      	beq.n	8001994 <HAL_UART_IRQHandler+0x198>
 800196c:	23a0      	movs	r3, #160	; 0xa0
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	04db      	lsls	r3, r3, #19
 8001976:	4013      	ands	r3, r2
 8001978:	d00c      	beq.n	8001994 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2280      	movs	r2, #128	; 0x80
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2284      	movs	r2, #132	; 0x84
 8001988:	589b      	ldr	r3, [r3, r2]
 800198a:	2220      	movs	r2, #32
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2184      	movs	r1, #132	; 0x84
 8001992:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2284      	movs	r2, #132	; 0x84
 8001998:	589b      	ldr	r3, [r3, r2]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d100      	bne.n	80019a0 <HAL_UART_IRQHandler+0x1a4>
 800199e:	e1ff      	b.n	8001da0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80019a0:	23a4      	movs	r3, #164	; 0xa4
 80019a2:	18fb      	adds	r3, r7, r3
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2220      	movs	r2, #32
 80019a8:	4013      	ands	r3, r2
 80019aa:	d00e      	beq.n	80019ca <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80019ac:	23a0      	movs	r3, #160	; 0xa0
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2220      	movs	r2, #32
 80019b4:	4013      	ands	r3, r2
 80019b6:	d008      	beq.n	80019ca <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	0010      	movs	r0, r2
 80019c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2284      	movs	r2, #132	; 0x84
 80019ce:	589b      	ldr	r3, [r3, r2]
 80019d0:	2194      	movs	r1, #148	; 0x94
 80019d2:	187a      	adds	r2, r7, r1
 80019d4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	2240      	movs	r2, #64	; 0x40
 80019de:	4013      	ands	r3, r2
 80019e0:	2b40      	cmp	r3, #64	; 0x40
 80019e2:	d004      	beq.n	80019ee <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2228      	movs	r2, #40	; 0x28
 80019ea:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80019ec:	d047      	beq.n	8001a7e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	0018      	movs	r0, r3
 80019f2:	f000 fd45 	bl	8002480 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2240      	movs	r2, #64	; 0x40
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b40      	cmp	r3, #64	; 0x40
 8001a02:	d137      	bne.n	8001a74 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a04:	f3ef 8310 	mrs	r3, PRIMASK
 8001a08:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a0c:	2090      	movs	r0, #144	; 0x90
 8001a0e:	183a      	adds	r2, r7, r0
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	2301      	movs	r3, #1
 8001a14:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a18:	f383 8810 	msr	PRIMASK, r3
}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2140      	movs	r1, #64	; 0x40
 8001a2a:	438a      	bics	r2, r1
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	183b      	adds	r3, r7, r0
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a36:	f383 8810 	msr	PRIMASK, r3
}
 8001a3a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d012      	beq.n	8001a6a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a48:	4a14      	ldr	r2, [pc, #80]	; (8001a9c <HAL_UART_IRQHandler+0x2a0>)
 8001a4a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7fe ff41 	bl	80008d8 <HAL_DMA_Abort_IT>
 8001a56:	1e03      	subs	r3, r0, #0
 8001a58:	d01a      	beq.n	8001a90 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a64:	0018      	movs	r0, r3
 8001a66:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a68:	e012      	b.n	8001a90 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f000 f9a5 	bl	8001dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a72:	e00d      	b.n	8001a90 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	0018      	movs	r0, r3
 8001a78:	f000 f9a0 	bl	8001dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a7c:	e008      	b.n	8001a90 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	0018      	movs	r0, r3
 8001a82:	f000 f99b 	bl	8001dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2284      	movs	r2, #132	; 0x84
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001a8e:	e187      	b.n	8001da0 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a90:	46c0      	nop			; (mov r8, r8)
    return;
 8001a92:	e185      	b.n	8001da0 <HAL_UART_IRQHandler+0x5a4>
 8001a94:	0000080f 	.word	0x0000080f
 8001a98:	04000120 	.word	0x04000120
 8001a9c:	08002549 	.word	0x08002549

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d000      	beq.n	8001aaa <HAL_UART_IRQHandler+0x2ae>
 8001aa8:	e139      	b.n	8001d1e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001aaa:	23a4      	movs	r3, #164	; 0xa4
 8001aac:	18fb      	adds	r3, r7, r3
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d100      	bne.n	8001ab8 <HAL_UART_IRQHandler+0x2bc>
 8001ab6:	e132      	b.n	8001d1e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001ab8:	23a0      	movs	r3, #160	; 0xa0
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2210      	movs	r2, #16
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d100      	bne.n	8001ac6 <HAL_UART_IRQHandler+0x2ca>
 8001ac4:	e12b      	b.n	8001d1e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2210      	movs	r2, #16
 8001acc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2240      	movs	r2, #64	; 0x40
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b40      	cmp	r3, #64	; 0x40
 8001ada:	d000      	beq.n	8001ade <HAL_UART_IRQHandler+0x2e2>
 8001adc:	e09f      	b.n	8001c1e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	217e      	movs	r1, #126	; 0x7e
 8001ae8:	187b      	adds	r3, r7, r1
 8001aea:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d100      	bne.n	8001af6 <HAL_UART_IRQHandler+0x2fa>
 8001af4:	e156      	b.n	8001da4 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2258      	movs	r2, #88	; 0x58
 8001afa:	5a9b      	ldrh	r3, [r3, r2]
 8001afc:	187a      	adds	r2, r7, r1
 8001afe:	8812      	ldrh	r2, [r2, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d300      	bcc.n	8001b06 <HAL_UART_IRQHandler+0x30a>
 8001b04:	e14e      	b.n	8001da4 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	187a      	adds	r2, r7, r1
 8001b0a:	215a      	movs	r1, #90	; 0x5a
 8001b0c:	8812      	ldrh	r2, [r2, #0]
 8001b0e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b20      	cmp	r3, #32
 8001b18:	d06f      	beq.n	8001bfa <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001b22:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b24:	2301      	movs	r3, #1
 8001b26:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b2a:	f383 8810 	msr	PRIMASK, r3
}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	499e      	ldr	r1, [pc, #632]	; (8001db4 <HAL_UART_IRQHandler+0x5b8>)
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b46:	f383 8810 	msr	PRIMASK, r3
}
 8001b4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8001b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b54:	677b      	str	r3, [r7, #116]	; 0x74
 8001b56:	2301      	movs	r3, #1
 8001b58:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b5c:	f383 8810 	msr	PRIMASK, r3
}
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	438a      	bics	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b74:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b78:	f383 8810 	msr	PRIMASK, r3
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8001b82:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b86:	673b      	str	r3, [r7, #112]	; 0x70
 8001b88:	2301      	movs	r3, #1
 8001b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b8e:	f383 8810 	msr	PRIMASK, r3
}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2140      	movs	r1, #64	; 0x40
 8001ba0:	438a      	bics	r2, r1
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ba6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001baa:	f383 8810 	msr	PRIMASK, r3
}
 8001bae:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	2120      	movs	r1, #32
 8001bb6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8001bc2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001bc8:	2301      	movs	r3, #1
 8001bca:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bce:	f383 8810 	msr	PRIMASK, r3
}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2110      	movs	r1, #16
 8001be0:	438a      	bics	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001be6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bea:	f383 8810 	msr	PRIMASK, r3
}
 8001bee:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7fe fe37 	bl	8000868 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2258      	movs	r2, #88	; 0x58
 8001c04:	5a9a      	ldrh	r2, [r3, r2]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	215a      	movs	r1, #90	; 0x5a
 8001c0a:	5a5b      	ldrh	r3, [r3, r1]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	0011      	movs	r1, r2
 8001c16:	0018      	movs	r0, r3
 8001c18:	f000 f8d8 	bl	8001dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001c1c:	e0c2      	b.n	8001da4 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2258      	movs	r2, #88	; 0x58
 8001c22:	5a99      	ldrh	r1, [r3, r2]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	225a      	movs	r2, #90	; 0x5a
 8001c28:	5a9b      	ldrh	r3, [r3, r2]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	208e      	movs	r0, #142	; 0x8e
 8001c2e:	183b      	adds	r3, r7, r0
 8001c30:	1a8a      	subs	r2, r1, r2
 8001c32:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	225a      	movs	r2, #90	; 0x5a
 8001c38:	5a9b      	ldrh	r3, [r3, r2]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d100      	bne.n	8001c42 <HAL_UART_IRQHandler+0x446>
 8001c40:	e0b2      	b.n	8001da8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8001c42:	183b      	adds	r3, r7, r0
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d100      	bne.n	8001c4c <HAL_UART_IRQHandler+0x450>
 8001c4a:	e0ad      	b.n	8001da8 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8001c50:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c52:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c54:	2488      	movs	r4, #136	; 0x88
 8001c56:	193a      	adds	r2, r7, r4
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	f383 8810 	msr	PRIMASK, r3
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4951      	ldr	r1, [pc, #324]	; (8001db8 <HAL_UART_IRQHandler+0x5bc>)
 8001c72:	400a      	ands	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	193b      	adds	r3, r7, r4
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f383 8810 	msr	PRIMASK, r3
}
 8001c82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c84:	f3ef 8310 	mrs	r3, PRIMASK
 8001c88:	61bb      	str	r3, [r7, #24]
  return(result);
 8001c8a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c8c:	2484      	movs	r4, #132	; 0x84
 8001c8e:	193a      	adds	r2, r7, r4
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	2301      	movs	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f383 8810 	msr	PRIMASK, r3
}
 8001c9c:	46c0      	nop			; (mov r8, r8)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2101      	movs	r1, #1
 8001caa:	438a      	bics	r2, r1
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	193b      	adds	r3, r7, r4
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	f383 8810 	msr	PRIMASK, r3
}
 8001cba:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	2120      	movs	r1, #32
 8001cc2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cd8:	2480      	movs	r4, #128	; 0x80
 8001cda:	193a      	adds	r2, r7, r4
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	2301      	movs	r3, #1
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce4:	f383 8810 	msr	PRIMASK, r3
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2110      	movs	r1, #16
 8001cf6:	438a      	bics	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	193b      	adds	r3, r7, r4
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d02:	f383 8810 	msr	PRIMASK, r3
}
 8001d06:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001d0e:	183b      	adds	r3, r7, r0
 8001d10:	881a      	ldrh	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	0011      	movs	r1, r2
 8001d16:	0018      	movs	r0, r3
 8001d18:	f000 f858 	bl	8001dcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8001d1c:	e044      	b.n	8001da8 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001d1e:	23a4      	movs	r3, #164	; 0xa4
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	035b      	lsls	r3, r3, #13
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d010      	beq.n	8001d4e <HAL_UART_IRQHandler+0x552>
 8001d2c:	239c      	movs	r3, #156	; 0x9c
 8001d2e:	18fb      	adds	r3, r7, r3
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	03db      	lsls	r3, r3, #15
 8001d36:	4013      	ands	r3, r2
 8001d38:	d009      	beq.n	8001d4e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	0352      	lsls	r2, r2, #13
 8001d42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	0018      	movs	r0, r3
 8001d48:	f000 fcf8 	bl	800273c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001d4c:	e02f      	b.n	8001dae <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001d4e:	23a4      	movs	r3, #164	; 0xa4
 8001d50:	18fb      	adds	r3, r7, r3
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2280      	movs	r2, #128	; 0x80
 8001d56:	4013      	ands	r3, r2
 8001d58:	d00f      	beq.n	8001d7a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001d5a:	23a0      	movs	r3, #160	; 0xa0
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	4013      	ands	r3, r2
 8001d64:	d009      	beq.n	8001d7a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d01e      	beq.n	8001dac <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	0010      	movs	r0, r2
 8001d76:	4798      	blx	r3
    }
    return;
 8001d78:	e018      	b.n	8001dac <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001d7a:	23a4      	movs	r3, #164	; 0xa4
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2240      	movs	r2, #64	; 0x40
 8001d82:	4013      	ands	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_UART_IRQHandler+0x5b2>
 8001d86:	23a0      	movs	r3, #160	; 0xa0
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2240      	movs	r2, #64	; 0x40
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d00d      	beq.n	8001dae <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	0018      	movs	r0, r3
 8001d96:	f000 fca6 	bl	80026e6 <UART_EndTransmit_IT>
    return;
 8001d9a:	e008      	b.n	8001dae <HAL_UART_IRQHandler+0x5b2>
      return;
 8001d9c:	46c0      	nop			; (mov r8, r8)
 8001d9e:	e006      	b.n	8001dae <HAL_UART_IRQHandler+0x5b2>
    return;
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	e004      	b.n	8001dae <HAL_UART_IRQHandler+0x5b2>
      return;
 8001da4:	46c0      	nop			; (mov r8, r8)
 8001da6:	e002      	b.n	8001dae <HAL_UART_IRQHandler+0x5b2>
      return;
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	e000      	b.n	8001dae <HAL_UART_IRQHandler+0x5b2>
    return;
 8001dac:	46c0      	nop			; (mov r8, r8)
  }

}
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b02b      	add	sp, #172	; 0xac
 8001db2:	bd90      	pop	{r4, r7, pc}
 8001db4:	fffffeff 	.word	0xfffffeff
 8001db8:	fffffedf 	.word	0xfffffedf

08001dbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b002      	add	sp, #8
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	000a      	movs	r2, r1
 8001dd6:	1cbb      	adds	r3, r7, #2
 8001dd8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001dec:	231e      	movs	r3, #30
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4aaf      	ldr	r2, [pc, #700]	; (80020d0 <UART_SetConfig+0x2ec>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	0019      	movs	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4aaa      	ldr	r2, [pc, #680]	; (80020d4 <UART_SetConfig+0x2f0>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4aa1      	ldr	r2, [pc, #644]	; (80020d8 <UART_SetConfig+0x2f4>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	0019      	movs	r1, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a9d      	ldr	r2, [pc, #628]	; (80020dc <UART_SetConfig+0x2f8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d127      	bne.n	8001eba <UART_SetConfig+0xd6>
 8001e6a:	4b9d      	ldr	r3, [pc, #628]	; (80020e0 <UART_SetConfig+0x2fc>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	2203      	movs	r2, #3
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d00d      	beq.n	8001e92 <UART_SetConfig+0xae>
 8001e76:	d81b      	bhi.n	8001eb0 <UART_SetConfig+0xcc>
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d014      	beq.n	8001ea6 <UART_SetConfig+0xc2>
 8001e7c:	d818      	bhi.n	8001eb0 <UART_SetConfig+0xcc>
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <UART_SetConfig+0xa4>
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d00a      	beq.n	8001e9c <UART_SetConfig+0xb8>
 8001e86:	e013      	b.n	8001eb0 <UART_SetConfig+0xcc>
 8001e88:	231f      	movs	r3, #31
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	e065      	b.n	8001f5e <UART_SetConfig+0x17a>
 8001e92:	231f      	movs	r3, #31
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	2202      	movs	r2, #2
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	e060      	b.n	8001f5e <UART_SetConfig+0x17a>
 8001e9c:	231f      	movs	r3, #31
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	e05b      	b.n	8001f5e <UART_SetConfig+0x17a>
 8001ea6:	231f      	movs	r3, #31
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	2208      	movs	r2, #8
 8001eac:	701a      	strb	r2, [r3, #0]
 8001eae:	e056      	b.n	8001f5e <UART_SetConfig+0x17a>
 8001eb0:	231f      	movs	r3, #31
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	2210      	movs	r2, #16
 8001eb6:	701a      	strb	r2, [r3, #0]
 8001eb8:	e051      	b.n	8001f5e <UART_SetConfig+0x17a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a89      	ldr	r2, [pc, #548]	; (80020e4 <UART_SetConfig+0x300>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d134      	bne.n	8001f2e <UART_SetConfig+0x14a>
 8001ec4:	4b86      	ldr	r3, [pc, #536]	; (80020e0 <UART_SetConfig+0x2fc>)
 8001ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ec8:	23c0      	movs	r3, #192	; 0xc0
 8001eca:	029b      	lsls	r3, r3, #10
 8001ecc:	4013      	ands	r3, r2
 8001ece:	22c0      	movs	r2, #192	; 0xc0
 8001ed0:	0292      	lsls	r2, r2, #10
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d017      	beq.n	8001f06 <UART_SetConfig+0x122>
 8001ed6:	22c0      	movs	r2, #192	; 0xc0
 8001ed8:	0292      	lsls	r2, r2, #10
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d822      	bhi.n	8001f24 <UART_SetConfig+0x140>
 8001ede:	2280      	movs	r2, #128	; 0x80
 8001ee0:	0292      	lsls	r2, r2, #10
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d019      	beq.n	8001f1a <UART_SetConfig+0x136>
 8001ee6:	2280      	movs	r2, #128	; 0x80
 8001ee8:	0292      	lsls	r2, r2, #10
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d81a      	bhi.n	8001f24 <UART_SetConfig+0x140>
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d004      	beq.n	8001efc <UART_SetConfig+0x118>
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	0252      	lsls	r2, r2, #9
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00a      	beq.n	8001f10 <UART_SetConfig+0x12c>
 8001efa:	e013      	b.n	8001f24 <UART_SetConfig+0x140>
 8001efc:	231f      	movs	r3, #31
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	e02b      	b.n	8001f5e <UART_SetConfig+0x17a>
 8001f06:	231f      	movs	r3, #31
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	701a      	strb	r2, [r3, #0]
 8001f0e:	e026      	b.n	8001f5e <UART_SetConfig+0x17a>
 8001f10:	231f      	movs	r3, #31
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	2204      	movs	r2, #4
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	e021      	b.n	8001f5e <UART_SetConfig+0x17a>
 8001f1a:	231f      	movs	r3, #31
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2208      	movs	r2, #8
 8001f20:	701a      	strb	r2, [r3, #0]
 8001f22:	e01c      	b.n	8001f5e <UART_SetConfig+0x17a>
 8001f24:	231f      	movs	r3, #31
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	2210      	movs	r2, #16
 8001f2a:	701a      	strb	r2, [r3, #0]
 8001f2c:	e017      	b.n	8001f5e <UART_SetConfig+0x17a>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a6d      	ldr	r2, [pc, #436]	; (80020e8 <UART_SetConfig+0x304>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d104      	bne.n	8001f42 <UART_SetConfig+0x15e>
 8001f38:	231f      	movs	r3, #31
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	e00d      	b.n	8001f5e <UART_SetConfig+0x17a>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a69      	ldr	r2, [pc, #420]	; (80020ec <UART_SetConfig+0x308>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d104      	bne.n	8001f56 <UART_SetConfig+0x172>
 8001f4c:	231f      	movs	r3, #31
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
 8001f54:	e003      	b.n	8001f5e <UART_SetConfig+0x17a>
 8001f56:	231f      	movs	r3, #31
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	2210      	movs	r2, #16
 8001f5c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69da      	ldr	r2, [r3, #28]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d15c      	bne.n	8002024 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8001f6a:	231f      	movs	r3, #31
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d015      	beq.n	8001fa0 <UART_SetConfig+0x1bc>
 8001f74:	dc18      	bgt.n	8001fa8 <UART_SetConfig+0x1c4>
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d00d      	beq.n	8001f96 <UART_SetConfig+0x1b2>
 8001f7a:	dc15      	bgt.n	8001fa8 <UART_SetConfig+0x1c4>
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <UART_SetConfig+0x1a2>
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d005      	beq.n	8001f90 <UART_SetConfig+0x1ac>
 8001f84:	e010      	b.n	8001fa8 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f86:	f7ff fb5f 	bl	8001648 <HAL_RCC_GetPCLK1Freq>
 8001f8a:	0003      	movs	r3, r0
 8001f8c:	61bb      	str	r3, [r7, #24]
        break;
 8001f8e:	e012      	b.n	8001fb6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f90:	4b57      	ldr	r3, [pc, #348]	; (80020f0 <UART_SetConfig+0x30c>)
 8001f92:	61bb      	str	r3, [r7, #24]
        break;
 8001f94:	e00f      	b.n	8001fb6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f96:	f7ff fadb 	bl	8001550 <HAL_RCC_GetSysClockFreq>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	61bb      	str	r3, [r7, #24]
        break;
 8001f9e:	e00a      	b.n	8001fb6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	61bb      	str	r3, [r7, #24]
        break;
 8001fa6:	e006      	b.n	8001fb6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001fac:	231e      	movs	r3, #30
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
        break;
 8001fb4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <UART_SetConfig+0x1da>
 8001fbc:	e07a      	b.n	80020b4 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	005a      	lsls	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	085b      	lsrs	r3, r3, #1
 8001fc8:	18d2      	adds	r2, r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	0019      	movs	r1, r3
 8001fd0:	0010      	movs	r0, r2
 8001fd2:	f7fe f8a1 	bl	8000118 <__udivsi3>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b0f      	cmp	r3, #15
 8001fde:	d91c      	bls.n	800201a <UART_SetConfig+0x236>
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	025b      	lsls	r3, r3, #9
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d217      	bcs.n	800201a <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	200e      	movs	r0, #14
 8001ff0:	183b      	adds	r3, r7, r0
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	438a      	bics	r2, r1
 8001ff6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	085b      	lsrs	r3, r3, #1
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2207      	movs	r2, #7
 8002000:	4013      	ands	r3, r2
 8002002:	b299      	uxth	r1, r3
 8002004:	183b      	adds	r3, r7, r0
 8002006:	183a      	adds	r2, r7, r0
 8002008:	8812      	ldrh	r2, [r2, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	183a      	adds	r2, r7, r0
 8002014:	8812      	ldrh	r2, [r2, #0]
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	e04c      	b.n	80020b4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800201a:	231e      	movs	r3, #30
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
 8002022:	e047      	b.n	80020b4 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002024:	231f      	movs	r3, #31
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b08      	cmp	r3, #8
 800202c:	d015      	beq.n	800205a <UART_SetConfig+0x276>
 800202e:	dc18      	bgt.n	8002062 <UART_SetConfig+0x27e>
 8002030:	2b04      	cmp	r3, #4
 8002032:	d00d      	beq.n	8002050 <UART_SetConfig+0x26c>
 8002034:	dc15      	bgt.n	8002062 <UART_SetConfig+0x27e>
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <UART_SetConfig+0x25c>
 800203a:	2b02      	cmp	r3, #2
 800203c:	d005      	beq.n	800204a <UART_SetConfig+0x266>
 800203e:	e010      	b.n	8002062 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002040:	f7ff fb02 	bl	8001648 <HAL_RCC_GetPCLK1Freq>
 8002044:	0003      	movs	r3, r0
 8002046:	61bb      	str	r3, [r7, #24]
        break;
 8002048:	e012      	b.n	8002070 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800204a:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <UART_SetConfig+0x30c>)
 800204c:	61bb      	str	r3, [r7, #24]
        break;
 800204e:	e00f      	b.n	8002070 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002050:	f7ff fa7e 	bl	8001550 <HAL_RCC_GetSysClockFreq>
 8002054:	0003      	movs	r3, r0
 8002056:	61bb      	str	r3, [r7, #24]
        break;
 8002058:	e00a      	b.n	8002070 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	61bb      	str	r3, [r7, #24]
        break;
 8002060:	e006      	b.n	8002070 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002066:	231e      	movs	r3, #30
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
        break;
 800206e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d01e      	beq.n	80020b4 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	085a      	lsrs	r2, r3, #1
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	18d2      	adds	r2, r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	0019      	movs	r1, r3
 8002086:	0010      	movs	r0, r2
 8002088:	f7fe f846 	bl	8000118 <__udivsi3>
 800208c:	0003      	movs	r3, r0
 800208e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	2b0f      	cmp	r3, #15
 8002094:	d90a      	bls.n	80020ac <UART_SetConfig+0x2c8>
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	025b      	lsls	r3, r3, #9
 800209c:	429a      	cmp	r2, r3
 800209e:	d205      	bcs.n	80020ac <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	e003      	b.n	80020b4 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80020ac:	231e      	movs	r3, #30
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80020c0:	231e      	movs	r3, #30
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	781b      	ldrb	r3, [r3, #0]
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b008      	add	sp, #32
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	efff69f3 	.word	0xefff69f3
 80020d4:	ffffcfff 	.word	0xffffcfff
 80020d8:	fffff4ff 	.word	0xfffff4ff
 80020dc:	40013800 	.word	0x40013800
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40004400 	.word	0x40004400
 80020e8:	40004800 	.word	0x40004800
 80020ec:	40004c00 	.word	0x40004c00
 80020f0:	007a1200 	.word	0x007a1200

080020f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	2201      	movs	r2, #1
 8002102:	4013      	ands	r3, r2
 8002104:	d00b      	beq.n	800211e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a4a      	ldr	r2, [pc, #296]	; (8002238 <UART_AdvFeatureConfig+0x144>)
 800210e:	4013      	ands	r3, r2
 8002110:	0019      	movs	r1, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	2202      	movs	r2, #2
 8002124:	4013      	ands	r3, r2
 8002126:	d00b      	beq.n	8002140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4a43      	ldr	r2, [pc, #268]	; (800223c <UART_AdvFeatureConfig+0x148>)
 8002130:	4013      	ands	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	2204      	movs	r2, #4
 8002146:	4013      	ands	r3, r2
 8002148:	d00b      	beq.n	8002162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a3b      	ldr	r2, [pc, #236]	; (8002240 <UART_AdvFeatureConfig+0x14c>)
 8002152:	4013      	ands	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	2208      	movs	r2, #8
 8002168:	4013      	ands	r3, r2
 800216a:	d00b      	beq.n	8002184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	4a34      	ldr	r2, [pc, #208]	; (8002244 <UART_AdvFeatureConfig+0x150>)
 8002174:	4013      	ands	r3, r2
 8002176:	0019      	movs	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	2210      	movs	r2, #16
 800218a:	4013      	ands	r3, r2
 800218c:	d00b      	beq.n	80021a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4a2c      	ldr	r2, [pc, #176]	; (8002248 <UART_AdvFeatureConfig+0x154>)
 8002196:	4013      	ands	r3, r2
 8002198:	0019      	movs	r1, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	2220      	movs	r2, #32
 80021ac:	4013      	ands	r3, r2
 80021ae:	d00b      	beq.n	80021c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	4a25      	ldr	r2, [pc, #148]	; (800224c <UART_AdvFeatureConfig+0x158>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	2240      	movs	r2, #64	; 0x40
 80021ce:	4013      	ands	r3, r2
 80021d0:	d01d      	beq.n	800220e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <UART_AdvFeatureConfig+0x15c>)
 80021da:	4013      	ands	r3, r2
 80021dc:	0019      	movs	r1, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	035b      	lsls	r3, r3, #13
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d10b      	bne.n	800220e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a15      	ldr	r2, [pc, #84]	; (8002254 <UART_AdvFeatureConfig+0x160>)
 80021fe:	4013      	ands	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	2280      	movs	r2, #128	; 0x80
 8002214:	4013      	ands	r3, r2
 8002216:	d00b      	beq.n	8002230 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <UART_AdvFeatureConfig+0x164>)
 8002220:	4013      	ands	r3, r2
 8002222:	0019      	movs	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	605a      	str	r2, [r3, #4]
  }
}
 8002230:	46c0      	nop			; (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}
 8002238:	fffdffff 	.word	0xfffdffff
 800223c:	fffeffff 	.word	0xfffeffff
 8002240:	fffbffff 	.word	0xfffbffff
 8002244:	ffff7fff 	.word	0xffff7fff
 8002248:	ffffefff 	.word	0xffffefff
 800224c:	ffffdfff 	.word	0xffffdfff
 8002250:	ffefffff 	.word	0xffefffff
 8002254:	ff9fffff 	.word	0xff9fffff
 8002258:	fff7ffff 	.word	0xfff7ffff

0800225c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b092      	sub	sp, #72	; 0x48
 8002260:	af02      	add	r7, sp, #8
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2284      	movs	r2, #132	; 0x84
 8002268:	2100      	movs	r1, #0
 800226a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800226c:	f7fe fa14 	bl	8000698 <HAL_GetTick>
 8002270:	0003      	movs	r3, r0
 8002272:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2208      	movs	r2, #8
 800227c:	4013      	ands	r3, r2
 800227e:	2b08      	cmp	r3, #8
 8002280:	d12c      	bne.n	80022dc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	0391      	lsls	r1, r2, #14
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4a46      	ldr	r2, [pc, #280]	; (80023a4 <UART_CheckIdleState+0x148>)
 800228c:	9200      	str	r2, [sp, #0]
 800228e:	2200      	movs	r2, #0
 8002290:	f000 f88c 	bl	80023ac <UART_WaitOnFlagUntilTimeout>
 8002294:	1e03      	subs	r3, r0, #0
 8002296:	d021      	beq.n	80022dc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002298:	f3ef 8310 	mrs	r3, PRIMASK
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80022a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80022a2:	2301      	movs	r3, #1
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	f383 8810 	msr	PRIMASK, r3
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2180      	movs	r1, #128	; 0x80
 80022ba:	438a      	bics	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	f383 8810 	msr	PRIMASK, r3
}
 80022c8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2220      	movs	r2, #32
 80022ce:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2278      	movs	r2, #120	; 0x78
 80022d4:	2100      	movs	r1, #0
 80022d6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e05f      	b.n	800239c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2204      	movs	r2, #4
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d146      	bne.n	8002378 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ec:	2280      	movs	r2, #128	; 0x80
 80022ee:	03d1      	lsls	r1, r2, #15
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <UART_CheckIdleState+0x148>)
 80022f4:	9200      	str	r2, [sp, #0]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f000 f858 	bl	80023ac <UART_WaitOnFlagUntilTimeout>
 80022fc:	1e03      	subs	r3, r0, #0
 80022fe:	d03b      	beq.n	8002378 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002300:	f3ef 8310 	mrs	r3, PRIMASK
 8002304:	60fb      	str	r3, [r7, #12]
  return(result);
 8002306:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002308:	637b      	str	r3, [r7, #52]	; 0x34
 800230a:	2301      	movs	r3, #1
 800230c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f383 8810 	msr	PRIMASK, r3
}
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4921      	ldr	r1, [pc, #132]	; (80023a8 <UART_CheckIdleState+0x14c>)
 8002322:	400a      	ands	r2, r1
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002328:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f383 8810 	msr	PRIMASK, r3
}
 8002330:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002332:	f3ef 8310 	mrs	r3, PRIMASK
 8002336:	61bb      	str	r3, [r7, #24]
  return(result);
 8002338:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800233a:	633b      	str	r3, [r7, #48]	; 0x30
 800233c:	2301      	movs	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f383 8810 	msr	PRIMASK, r3
}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2101      	movs	r1, #1
 8002354:	438a      	bics	r2, r1
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	f383 8810 	msr	PRIMASK, r3
}
 8002362:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2280      	movs	r2, #128	; 0x80
 8002368:	2120      	movs	r1, #32
 800236a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2278      	movs	r2, #120	; 0x78
 8002370:	2100      	movs	r1, #0
 8002372:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e011      	b.n	800239c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2220      	movs	r2, #32
 800237c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2280      	movs	r2, #128	; 0x80
 8002382:	2120      	movs	r1, #32
 8002384:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2278      	movs	r2, #120	; 0x78
 8002396:	2100      	movs	r1, #0
 8002398:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	b010      	add	sp, #64	; 0x40
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	01ffffff 	.word	0x01ffffff
 80023a8:	fffffedf 	.word	0xfffffedf

080023ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	1dfb      	adds	r3, r7, #7
 80023ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023bc:	e04b      	b.n	8002456 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	3301      	adds	r3, #1
 80023c2:	d048      	beq.n	8002456 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c4:	f7fe f968 	bl	8000698 <HAL_GetTick>
 80023c8:	0002      	movs	r2, r0
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d302      	bcc.n	80023da <UART_WaitOnFlagUntilTimeout+0x2e>
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e04b      	b.n	8002476 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2204      	movs	r2, #4
 80023e6:	4013      	ands	r3, r2
 80023e8:	d035      	beq.n	8002456 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	2208      	movs	r2, #8
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d111      	bne.n	800241c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2208      	movs	r2, #8
 80023fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	0018      	movs	r0, r3
 8002404:	f000 f83c 	bl	8002480 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2284      	movs	r2, #132	; 0x84
 800240c:	2108      	movs	r1, #8
 800240e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2278      	movs	r2, #120	; 0x78
 8002414:	2100      	movs	r1, #0
 8002416:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e02c      	b.n	8002476 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	69da      	ldr	r2, [r3, #28]
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	401a      	ands	r2, r3
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	429a      	cmp	r2, r3
 800242e:	d112      	bne.n	8002456 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	0018      	movs	r0, r3
 800243e:	f000 f81f 	bl	8002480 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2284      	movs	r2, #132	; 0x84
 8002446:	2120      	movs	r1, #32
 8002448:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2278      	movs	r2, #120	; 0x78
 800244e:	2100      	movs	r1, #0
 8002450:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e00f      	b.n	8002476 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	4013      	ands	r3, r2
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	425a      	negs	r2, r3
 8002466:	4153      	adcs	r3, r2
 8002468:	b2db      	uxtb	r3, r3
 800246a:	001a      	movs	r2, r3
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d0a4      	beq.n	80023be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b004      	add	sp, #16
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08e      	sub	sp, #56	; 0x38
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002488:	f3ef 8310 	mrs	r3, PRIMASK
 800248c:	617b      	str	r3, [r7, #20]
  return(result);
 800248e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002490:	637b      	str	r3, [r7, #52]	; 0x34
 8002492:	2301      	movs	r3, #1
 8002494:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	f383 8810 	msr	PRIMASK, r3
}
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4926      	ldr	r1, [pc, #152]	; (8002544 <UART_EndRxTransfer+0xc4>)
 80024aa:	400a      	ands	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f383 8810 	msr	PRIMASK, r3
}
 80024b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ba:	f3ef 8310 	mrs	r3, PRIMASK
 80024be:	623b      	str	r3, [r7, #32]
  return(result);
 80024c0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c2:	633b      	str	r3, [r7, #48]	; 0x30
 80024c4:	2301      	movs	r3, #1
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	f383 8810 	msr	PRIMASK, r3
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2101      	movs	r1, #1
 80024dc:	438a      	bics	r2, r1
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e6:	f383 8810 	msr	PRIMASK, r3
}
 80024ea:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d118      	bne.n	8002526 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024f4:	f3ef 8310 	mrs	r3, PRIMASK
 80024f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80024fa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024fe:	2301      	movs	r3, #1
 8002500:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f383 8810 	msr	PRIMASK, r3
}
 8002508:	46c0      	nop			; (mov r8, r8)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2110      	movs	r1, #16
 8002516:	438a      	bics	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f383 8810 	msr	PRIMASK, r3
}
 8002524:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2280      	movs	r2, #128	; 0x80
 800252a:	2120      	movs	r1, #32
 800252c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	669a      	str	r2, [r3, #104]	; 0x68
}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	46bd      	mov	sp, r7
 800253e:	b00e      	add	sp, #56	; 0x38
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	fffffedf 	.word	0xfffffedf

08002548 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	225a      	movs	r2, #90	; 0x5a
 800255a:	2100      	movs	r1, #0
 800255c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2252      	movs	r2, #82	; 0x52
 8002562:	2100      	movs	r1, #0
 8002564:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	0018      	movs	r0, r3
 800256a:	f7ff fc27 	bl	8001dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	46bd      	mov	sp, r7
 8002572:	b004      	add	sp, #16
 8002574:	bd80      	pop	{r7, pc}

08002576 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b08a      	sub	sp, #40	; 0x28
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002582:	2b21      	cmp	r3, #33	; 0x21
 8002584:	d14d      	bne.n	8002622 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2252      	movs	r2, #82	; 0x52
 800258a:	5a9b      	ldrh	r3, [r3, r2]
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d132      	bne.n	80025f8 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002592:	f3ef 8310 	mrs	r3, PRIMASK
 8002596:	60bb      	str	r3, [r7, #8]
  return(result);
 8002598:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
 800259c:	2301      	movs	r3, #1
 800259e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f383 8810 	msr	PRIMASK, r3
}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	438a      	bics	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f383 8810 	msr	PRIMASK, r3
}
 80025c2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c4:	f3ef 8310 	mrs	r3, PRIMASK
 80025c8:	617b      	str	r3, [r7, #20]
  return(result);
 80025ca:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025cc:	623b      	str	r3, [r7, #32]
 80025ce:	2301      	movs	r3, #1
 80025d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f383 8810 	msr	PRIMASK, r3
}
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2140      	movs	r1, #64	; 0x40
 80025e6:	430a      	orrs	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	f383 8810 	msr	PRIMASK, r3
}
 80025f4:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80025f6:	e014      	b.n	8002622 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fc:	781a      	ldrb	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	b292      	uxth	r2, r2
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2252      	movs	r2, #82	; 0x52
 8002614:	5a9b      	ldrh	r3, [r3, r2]
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b299      	uxth	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2252      	movs	r2, #82	; 0x52
 8002620:	5299      	strh	r1, [r3, r2]
}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	46bd      	mov	sp, r7
 8002626:	b00a      	add	sp, #40	; 0x28
 8002628:	bd80      	pop	{r7, pc}

0800262a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b08c      	sub	sp, #48	; 0x30
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002636:	2b21      	cmp	r3, #33	; 0x21
 8002638:	d151      	bne.n	80026de <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2252      	movs	r2, #82	; 0x52
 800263e:	5a9b      	ldrh	r3, [r3, r2]
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d132      	bne.n	80026ac <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002646:	f3ef 8310 	mrs	r3, PRIMASK
 800264a:	60fb      	str	r3, [r7, #12]
  return(result);
 800264c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002650:	2301      	movs	r3, #1
 8002652:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f383 8810 	msr	PRIMASK, r3
}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2180      	movs	r1, #128	; 0x80
 8002668:	438a      	bics	r2, r1
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f383 8810 	msr	PRIMASK, r3
}
 8002676:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002678:	f3ef 8310 	mrs	r3, PRIMASK
 800267c:	61bb      	str	r3, [r7, #24]
  return(result);
 800267e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
 8002682:	2301      	movs	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f383 8810 	msr	PRIMASK, r3
}
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2140      	movs	r1, #64	; 0x40
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	f383 8810 	msr	PRIMASK, r3
}
 80026a8:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80026aa:	e018      	b.n	80026de <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	881a      	ldrh	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	05d2      	lsls	r2, r2, #23
 80026bc:	0dd2      	lsrs	r2, r2, #23
 80026be:	b292      	uxth	r2, r2
 80026c0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	1c9a      	adds	r2, r3, #2
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2252      	movs	r2, #82	; 0x52
 80026d0:	5a9b      	ldrh	r3, [r3, r2]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b299      	uxth	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2252      	movs	r2, #82	; 0x52
 80026dc:	5299      	strh	r1, [r3, r2]
}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b00c      	add	sp, #48	; 0x30
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ee:	f3ef 8310 	mrs	r3, PRIMASK
 80026f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80026f4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	2301      	movs	r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f383 8810 	msr	PRIMASK, r3
}
 8002702:	46c0      	nop			; (mov r8, r8)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2140      	movs	r1, #64	; 0x40
 8002710:	438a      	bics	r2, r1
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f383 8810 	msr	PRIMASK, r3
}
 800271e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	0018      	movs	r0, r3
 8002730:	f7fd fd7e 	bl	8000230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b006      	add	sp, #24
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002744:	46c0      	nop			; (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}

0800274c <__libc_init_array>:
 800274c:	b570      	push	{r4, r5, r6, lr}
 800274e:	2600      	movs	r6, #0
 8002750:	4d0c      	ldr	r5, [pc, #48]	; (8002784 <__libc_init_array+0x38>)
 8002752:	4c0d      	ldr	r4, [pc, #52]	; (8002788 <__libc_init_array+0x3c>)
 8002754:	1b64      	subs	r4, r4, r5
 8002756:	10a4      	asrs	r4, r4, #2
 8002758:	42a6      	cmp	r6, r4
 800275a:	d109      	bne.n	8002770 <__libc_init_array+0x24>
 800275c:	2600      	movs	r6, #0
 800275e:	f000 f821 	bl	80027a4 <_init>
 8002762:	4d0a      	ldr	r5, [pc, #40]	; (800278c <__libc_init_array+0x40>)
 8002764:	4c0a      	ldr	r4, [pc, #40]	; (8002790 <__libc_init_array+0x44>)
 8002766:	1b64      	subs	r4, r4, r5
 8002768:	10a4      	asrs	r4, r4, #2
 800276a:	42a6      	cmp	r6, r4
 800276c:	d105      	bne.n	800277a <__libc_init_array+0x2e>
 800276e:	bd70      	pop	{r4, r5, r6, pc}
 8002770:	00b3      	lsls	r3, r6, #2
 8002772:	58eb      	ldr	r3, [r5, r3]
 8002774:	4798      	blx	r3
 8002776:	3601      	adds	r6, #1
 8002778:	e7ee      	b.n	8002758 <__libc_init_array+0xc>
 800277a:	00b3      	lsls	r3, r6, #2
 800277c:	58eb      	ldr	r3, [r5, r3]
 800277e:	4798      	blx	r3
 8002780:	3601      	adds	r6, #1
 8002782:	e7f2      	b.n	800276a <__libc_init_array+0x1e>
 8002784:	080027f4 	.word	0x080027f4
 8002788:	080027f4 	.word	0x080027f4
 800278c:	080027f4 	.word	0x080027f4
 8002790:	080027f8 	.word	0x080027f8

08002794 <memset>:
 8002794:	0003      	movs	r3, r0
 8002796:	1882      	adds	r2, r0, r2
 8002798:	4293      	cmp	r3, r2
 800279a:	d100      	bne.n	800279e <memset+0xa>
 800279c:	4770      	bx	lr
 800279e:	7019      	strb	r1, [r3, #0]
 80027a0:	3301      	adds	r3, #1
 80027a2:	e7f9      	b.n	8002798 <memset+0x4>

080027a4 <_init>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027aa:	bc08      	pop	{r3}
 80027ac:	469e      	mov	lr, r3
 80027ae:	4770      	bx	lr

080027b0 <_fini>:
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b6:	bc08      	pop	{r3}
 80027b8:	469e      	mov	lr, r3
 80027ba:	4770      	bx	lr
